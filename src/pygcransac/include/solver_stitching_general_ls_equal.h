// Copyright (C) 2019 Czech Technical University.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//
//     * Neither the name of Czech Technical University nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// Please contact the author of this library if you have any questions.
// Author: Daniel Barath (barath.daniel@sztaki.mta.hu)
#pragma once

#include <Eigen/Eigen>
#include "solver_engine.h"
#include "fundamental_estimator.h"
#include "/usr/local/include/eigen3/unsupported/Eigen/Polynomials"

namespace gcransac
{
	namespace estimator
	{
		namespace solver
		{
			// This is the estimator class for estimating a homography matrix between two images. A model estimation method and error calculation method are implemented
			class StitchingGeneralFocalEqualLS : public SolverEngine
			{
			public:
				StitchingGeneralFocalEqualLS() : gravity_source(Eigen::Matrix3d::Identity()),
												 gravity_destination(Eigen::Matrix3d::Identity())
				{
				}

				~StitchingGeneralFocalEqualLS()
				{
				}

				// The minimum number of points required for the estimation
				static constexpr size_t sampleSize()
				{
					return 3;
				}

				static constexpr size_t maximumSolutions()
				{
					return 16;
				}

				// Determines if there is a chance of returning multiple models
				// the function 'estimateModel' is applied.
				static constexpr bool returnMultipleModels()
				{
					return true;
				}

				static constexpr bool needsGravity()
				{
					return false;
				}

				static constexpr char *getName()
				{
					return "General Equal ls";
				}

				void setGravity(const Eigen::Matrix3d &gravity_source_,
								const Eigen::Matrix3d &gravity_destination_)
				{
					gravity_source = gravity_source_;
					gravity_destination = gravity_destination_;
				}

				// Estimate the model parameters from the given point sample
				// using weighted fitting if possible.
				OLGA_INLINE bool estimateModel(
					const cv::Mat &data_,					 // The set of data points
					const size_t *sample_,					 // The sample used for the estimation
					size_t sample_number_,					 // The size of the sample
					std::vector<Model> &models_,			 // The estimated model parameters
					const double *weights_ = nullptr) const; // The weight for each point

				Eigen::Matrix3d K1, K2;

			protected:
				Eigen::Matrix3d gravity_source;
				Eigen::Matrix3d gravity_destination;
			};

			Eigen::MatrixXcd solver_equal_focal_ls(const Eigen::VectorXd &data)
			{
				using namespace Eigen;
				const double *d = data.data();
				VectorXd coeffs(266);
				coeffs[0] = d[5] * d[7] - d[4] * d[8];
				coeffs[1] = -d[8] * d[13] + d[7] * d[14] + d[5] * d[16] - d[4] * d[17];
				coeffs[2] = d[14] * d[16] - d[13] * d[17];
				coeffs[3] = -d[8] * d[22] + d[7] * d[23] + d[5] * d[25] - d[4] * d[26];
				coeffs[4] = -d[17] * d[22] + d[16] * d[23] + d[14] * d[25] - d[13] * d[26];
				coeffs[5] = d[23] * d[25] - d[22] * d[26];
				coeffs[6] = -d[8] * d[31] + d[7] * d[32] + d[5] * d[34] - d[4] * d[35];
				coeffs[7] = -d[17] * d[31] + d[16] * d[32] + d[14] * d[34] - d[13] * d[35];
				coeffs[8] = -d[26] * d[31] + d[25] * d[32] + d[23] * d[34] - d[22] * d[35];
				coeffs[9] = d[32] * d[34] - d[31] * d[35];
				coeffs[10] = -d[8] * d[40] + d[7] * d[41] + d[5] * d[43] - d[4] * d[44];
				coeffs[11] = -d[17] * d[40] + d[16] * d[41] + d[14] * d[43] - d[13] * d[44];
				coeffs[12] = -d[26] * d[40] + d[25] * d[41] + d[23] * d[43] - d[22] * d[44];
				coeffs[13] = -d[35] * d[40] + d[34] * d[41] + d[32] * d[43] - d[31] * d[44];
				coeffs[14] = d[41] * d[43] - d[40] * d[44];
				coeffs[15] = d[0];
				coeffs[16] = d[9];
				coeffs[17] = d[18];
				coeffs[18] = d[27];
				coeffs[19] = d[36];
				coeffs[20] = d[2] * d[7] - d[1] * d[8];
				coeffs[21] = -d[8] * d[10] + d[7] * d[11] + d[2] * d[16] - d[1] * d[17];
				coeffs[22] = d[11] * d[16] - d[10] * d[17];
				coeffs[23] = -d[8] * d[19] + d[7] * d[20] + d[2] * d[25] - d[1] * d[26];
				coeffs[24] = -d[17] * d[19] + d[16] * d[20] + d[11] * d[25] - d[10] * d[26];
				coeffs[25] = d[20] * d[25] - d[19] * d[26];
				coeffs[26] = -d[8] * d[28] + d[7] * d[29] + d[2] * d[34] - d[1] * d[35];
				coeffs[27] = -d[17] * d[28] + d[16] * d[29] + d[11] * d[34] - d[10] * d[35];
				coeffs[28] = -d[26] * d[28] + d[25] * d[29] + d[20] * d[34] - d[19] * d[35];
				coeffs[29] = d[29] * d[34] - d[28] * d[35];
				coeffs[30] = -d[8] * d[37] + d[7] * d[38] + d[2] * d[43] - d[1] * d[44];
				coeffs[31] = -d[17] * d[37] + d[16] * d[38] + d[11] * d[43] - d[10] * d[44];
				coeffs[32] = -d[26] * d[37] + d[25] * d[38] + d[20] * d[43] - d[19] * d[44];
				coeffs[33] = -d[35] * d[37] + d[34] * d[38] + d[29] * d[43] - d[28] * d[44];
				coeffs[34] = d[38] * d[43] - d[37] * d[44];
				coeffs[35] = -d[3];
				coeffs[36] = -d[12];
				coeffs[37] = -d[21];
				coeffs[38] = -d[30];
				coeffs[39] = -d[39];
				coeffs[40] = d[5] * d[6] - d[3] * d[8];
				coeffs[41] = -d[8] * d[12] + d[6] * d[14] + d[5] * d[15] - d[3] * d[17];
				coeffs[42] = d[14] * d[15] - d[12] * d[17];
				coeffs[43] = -d[8] * d[21] + d[6] * d[23] + d[5] * d[24] - d[3] * d[26];
				coeffs[44] = -d[17] * d[21] + d[15] * d[23] + d[14] * d[24] - d[12] * d[26];
				coeffs[45] = d[23] * d[24] - d[21] * d[26];
				coeffs[46] = -d[8] * d[30] + d[6] * d[32] + d[5] * d[33] - d[3] * d[35];
				coeffs[47] = -d[17] * d[30] + d[15] * d[32] + d[14] * d[33] - d[12] * d[35];
				coeffs[48] = -d[26] * d[30] + d[24] * d[32] + d[23] * d[33] - d[21] * d[35];
				coeffs[49] = d[32] * d[33] - d[30] * d[35];
				coeffs[50] = -d[8] * d[39] + d[6] * d[41] + d[5] * d[42] - d[3] * d[44];
				coeffs[51] = -d[17] * d[39] + d[15] * d[41] + d[14] * d[42] - d[12] * d[44];
				coeffs[52] = -d[26] * d[39] + d[24] * d[41] + d[23] * d[42] - d[21] * d[44];
				coeffs[53] = -d[35] * d[39] + d[33] * d[41] + d[32] * d[42] - d[30] * d[44];
				coeffs[54] = d[41] * d[42] - d[39] * d[44];
				coeffs[55] = -d[1];
				coeffs[56] = -d[10];
				coeffs[57] = -d[19];
				coeffs[58] = -d[28];
				coeffs[59] = -d[37];
				coeffs[60] = d[2] * d[6] - d[0] * d[8];
				coeffs[61] = -d[8] * d[9] + d[6] * d[11] + d[2] * d[15] - d[0] * d[17];
				coeffs[62] = d[11] * d[15] - d[9] * d[17];
				coeffs[63] = -d[8] * d[18] + d[6] * d[20] + d[2] * d[24] - d[0] * d[26];
				coeffs[64] = -d[17] * d[18] + d[15] * d[20] + d[11] * d[24] - d[9] * d[26];
				coeffs[65] = d[20] * d[24] - d[18] * d[26];
				coeffs[66] = -d[8] * d[27] + d[6] * d[29] + d[2] * d[33] - d[0] * d[35];
				coeffs[67] = -d[17] * d[27] + d[15] * d[29] + d[11] * d[33] - d[9] * d[35];
				coeffs[68] = -d[26] * d[27] + d[24] * d[29] + d[20] * d[33] - d[18] * d[35];
				coeffs[69] = d[29] * d[33] - d[27] * d[35];
				coeffs[70] = -d[8] * d[36] + d[6] * d[38] + d[2] * d[42] - d[0] * d[44];
				coeffs[71] = -d[17] * d[36] + d[15] * d[38] + d[11] * d[42] - d[9] * d[44];
				coeffs[72] = -d[26] * d[36] + d[24] * d[38] + d[20] * d[42] - d[18] * d[44];
				coeffs[73] = -d[35] * d[36] + d[33] * d[38] + d[29] * d[42] - d[27] * d[44];
				coeffs[74] = d[38] * d[42] - d[36] * d[44];
				coeffs[75] = d[4];
				coeffs[76] = d[13];
				coeffs[77] = d[22];
				coeffs[78] = d[31];
				coeffs[79] = d[40];
				coeffs[80] = d[1] * d[3] - d[0] * d[4];
				coeffs[81] = -d[4] * d[9] + d[3] * d[10] + d[1] * d[12] - d[0] * d[13];
				coeffs[82] = d[10] * d[12] - d[9] * d[13];
				coeffs[83] = -d[4] * d[18] + d[3] * d[19] + d[1] * d[21] - d[0] * d[22];
				coeffs[84] = -d[13] * d[18] + d[12] * d[19] + d[10] * d[21] - d[9] * d[22];
				coeffs[85] = d[19] * d[21] - d[18] * d[22];
				coeffs[86] = -d[4] * d[27] + d[3] * d[28] + d[1] * d[30] - d[0] * d[31];
				coeffs[87] = -d[13] * d[27] + d[12] * d[28] + d[10] * d[30] - d[9] * d[31];
				coeffs[88] = -d[22] * d[27] + d[21] * d[28] + d[19] * d[30] - d[18] * d[31];
				coeffs[89] = d[28] * d[30] - d[27] * d[31];
				coeffs[90] = -d[4] * d[36] + d[3] * d[37] + d[1] * d[39] - d[0] * d[40];
				coeffs[91] = -d[13] * d[36] + d[12] * d[37] + d[10] * d[39] - d[9] * d[40];
				coeffs[92] = -d[22] * d[36] + d[21] * d[37] + d[19] * d[39] - d[18] * d[40];
				coeffs[93] = -d[31] * d[36] + d[30] * d[37] + d[28] * d[39] - d[27] * d[40];
				coeffs[94] = d[37] * d[39] - d[36] * d[40];
				coeffs[95] = d[8];
				coeffs[96] = d[17];
				coeffs[97] = d[26];
				coeffs[98] = d[35];
				coeffs[99] = d[44];
				coeffs[100] = std::pow(d[0], 2) + std::pow(d[1], 2) + std::pow(d[3], 2) + std::pow(d[4], 2) - std::pow(d[8], 2);
				coeffs[101] = 2 * d[0] * d[9] + 2 * d[1] * d[10] + 2 * d[3] * d[12] + 2 * d[4] * d[13] - 2 * d[8] * d[17];
				coeffs[102] = std::pow(d[9], 2) + std::pow(d[10], 2) + std::pow(d[12], 2) + std::pow(d[13], 2) - std::pow(d[17], 2);
				coeffs[103] = 2 * d[0] * d[18] + 2 * d[1] * d[19] + 2 * d[3] * d[21] + 2 * d[4] * d[22] - 2 * d[8] * d[26];
				coeffs[104] = 2 * d[9] * d[18] + 2 * d[10] * d[19] + 2 * d[12] * d[21] + 2 * d[13] * d[22] - 2 * d[17] * d[26];
				coeffs[105] = std::pow(d[18], 2) + std::pow(d[19], 2) + std::pow(d[21], 2) + std::pow(d[22], 2) - std::pow(d[26], 2);
				coeffs[106] = 2 * d[0] * d[27] + 2 * d[1] * d[28] + 2 * d[3] * d[30] + 2 * d[4] * d[31] - 2 * d[8] * d[35];
				coeffs[107] = 2 * d[9] * d[27] + 2 * d[10] * d[28] + 2 * d[12] * d[30] + 2 * d[13] * d[31] - 2 * d[17] * d[35];
				coeffs[108] = 2 * d[18] * d[27] + 2 * d[19] * d[28] + 2 * d[21] * d[30] + 2 * d[22] * d[31] - 2 * d[26] * d[35];
				coeffs[109] = std::pow(d[27], 2) + std::pow(d[28], 2) + std::pow(d[30], 2) + std::pow(d[31], 2) - std::pow(d[35], 2);
				coeffs[110] = 2 * d[0] * d[36] + 2 * d[1] * d[37] + 2 * d[3] * d[39] + 2 * d[4] * d[40] - 2 * d[8] * d[44];
				coeffs[111] = 2 * d[9] * d[36] + 2 * d[10] * d[37] + 2 * d[12] * d[39] + 2 * d[13] * d[40] - 2 * d[17] * d[44];
				coeffs[112] = 2 * d[18] * d[36] + 2 * d[19] * d[37] + 2 * d[21] * d[39] + 2 * d[22] * d[40] - 2 * d[26] * d[44];
				coeffs[113] = 2 * d[27] * d[36] + 2 * d[28] * d[37] + 2 * d[30] * d[39] + 2 * d[31] * d[40] - 2 * d[35] * d[44];
				coeffs[114] = std::pow(d[36], 2) + std::pow(d[37], 2) + std::pow(d[39], 2) + std::pow(d[40], 2) - std::pow(d[44], 2);
				coeffs[115] = -1;
				coeffs[116] = std::pow(d[1], 2) * d[6] + std::pow(d[4], 2) * d[6] - d[0] * d[1] * d[7] - d[3] * d[4] * d[7];
				coeffs[117] = -d[1] * d[7] * d[9] + 2 * d[1] * d[6] * d[10] - d[0] * d[7] * d[10] - d[4] * d[7] * d[12] + 2 * d[4] * d[6] * d[13] - d[3] * d[7] * d[13] + std::pow(d[1], 2) * d[15] + std::pow(d[4], 2) * d[15] - d[0] * d[1] * d[16] - d[3] * d[4] * d[16];
				coeffs[118] = -d[7] * d[9] * d[10] + d[6] * std::pow(d[10], 2) - d[7] * d[12] * d[13] + d[6] * std::pow(d[13], 2) + 2 * d[1] * d[10] * d[15] + 2 * d[4] * d[13] * d[15] - d[1] * d[9] * d[16] - d[0] * d[10] * d[16] - d[4] * d[12] * d[16] - d[3] * d[13] * d[16];
				coeffs[119] = std::pow(d[10], 2) * d[15] + std::pow(d[13], 2) * d[15] - d[9] * d[10] * d[16] - d[12] * d[13] * d[16];
				coeffs[120] = -d[1] * d[7] * d[18] + 2 * d[1] * d[6] * d[19] - d[0] * d[7] * d[19] - d[4] * d[7] * d[21] + 2 * d[4] * d[6] * d[22] - d[3] * d[7] * d[22] + std::pow(d[1], 2) * d[24] + std::pow(d[4], 2) * d[24] - d[0] * d[1] * d[25] - d[3] * d[4] * d[25];
				coeffs[121] = -d[7] * d[10] * d[18] - d[1] * d[16] * d[18] - d[7] * d[9] * d[19] + 2 * d[6] * d[10] * d[19] + 2 * d[1] * d[15] * d[19] - d[0] * d[16] * d[19] - d[7] * d[13] * d[21] - d[4] * d[16] * d[21] - d[7] * d[12] * d[22] + 2 * d[6] * d[13] * d[22] + 2 * d[4] * d[15] * d[22] - d[3] * d[16] * d[22] + 2 * d[1] * d[10] * d[24] + 2 * d[4] * d[13] * d[24] - d[1] * d[9] * d[25] - d[0] * d[10] * d[25] - d[4] * d[12] * d[25] - d[3] * d[13] * d[25];
				coeffs[122] = -d[10] * d[16] * d[18] + 2 * d[10] * d[15] * d[19] - d[9] * d[16] * d[19] - d[13] * d[16] * d[21] + 2 * d[13] * d[15] * d[22] - d[12] * d[16] * d[22] + std::pow(d[10], 2) * d[24] + std::pow(d[13], 2) * d[24] - d[9] * d[10] * d[25] - d[12] * d[13] * d[25];
				coeffs[123] = -d[7] * d[18] * d[19] + d[6] * std::pow(d[19], 2) - d[7] * d[21] * d[22] + d[6] * std::pow(d[22], 2) + 2 * d[1] * d[19] * d[24] + 2 * d[4] * d[22] * d[24] - d[1] * d[18] * d[25] - d[0] * d[19] * d[25] - d[4] * d[21] * d[25] - d[3] * d[22] * d[25];
				coeffs[124] = -d[16] * d[18] * d[19] + d[15] * std::pow(d[19], 2) - d[16] * d[21] * d[22] + d[15] * std::pow(d[22], 2) + 2 * d[10] * d[19] * d[24] + 2 * d[13] * d[22] * d[24] - d[10] * d[18] * d[25] - d[9] * d[19] * d[25] - d[13] * d[21] * d[25] - d[12] * d[22] * d[25];
				coeffs[125] = std::pow(d[19], 2) * d[24] + std::pow(d[22], 2) * d[24] - d[18] * d[19] * d[25] - d[21] * d[22] * d[25];
				coeffs[126] = -d[1] * d[7] * d[27] + 2 * d[1] * d[6] * d[28] - d[0] * d[7] * d[28] - d[4] * d[7] * d[30] + 2 * d[4] * d[6] * d[31] - d[3] * d[7] * d[31] + std::pow(d[1], 2) * d[33] + std::pow(d[4], 2) * d[33] - d[0] * d[1] * d[34] - d[3] * d[4] * d[34];
				coeffs[127] = -d[7] * d[10] * d[27] - d[1] * d[16] * d[27] - d[7] * d[9] * d[28] + 2 * d[6] * d[10] * d[28] + 2 * d[1] * d[15] * d[28] - d[0] * d[16] * d[28] - d[7] * d[13] * d[30] - d[4] * d[16] * d[30] - d[7] * d[12] * d[31] + 2 * d[6] * d[13] * d[31] + 2 * d[4] * d[15] * d[31] - d[3] * d[16] * d[31] + 2 * d[1] * d[10] * d[33] + 2 * d[4] * d[13] * d[33] - d[1] * d[9] * d[34] - d[0] * d[10] * d[34] - d[4] * d[12] * d[34] - d[3] * d[13] * d[34];
				coeffs[128] = -d[10] * d[16] * d[27] + 2 * d[10] * d[15] * d[28] - d[9] * d[16] * d[28] - d[13] * d[16] * d[30] + 2 * d[13] * d[15] * d[31] - d[12] * d[16] * d[31] + std::pow(d[10], 2) * d[33] + std::pow(d[13], 2) * d[33] - d[9] * d[10] * d[34] - d[12] * d[13] * d[34];
				coeffs[129] = -d[7] * d[19] * d[27] - d[1] * d[25] * d[27] - d[7] * d[18] * d[28] + 2 * d[6] * d[19] * d[28] + 2 * d[1] * d[24] * d[28] - d[0] * d[25] * d[28] - d[7] * d[22] * d[30] - d[4] * d[25] * d[30] - d[7] * d[21] * d[31] + 2 * d[6] * d[22] * d[31] + 2 * d[4] * d[24] * d[31] - d[3] * d[25] * d[31] + 2 * d[1] * d[19] * d[33] + 2 * d[4] * d[22] * d[33] - d[1] * d[18] * d[34] - d[0] * d[19] * d[34] - d[4] * d[21] * d[34] - d[3] * d[22] * d[34];
				coeffs[130] = -d[16] * d[19] * d[27] - d[10] * d[25] * d[27] - d[16] * d[18] * d[28] + 2 * d[15] * d[19] * d[28] + 2 * d[10] * d[24] * d[28] - d[9] * d[25] * d[28] - d[16] * d[22] * d[30] - d[13] * d[25] * d[30] - d[16] * d[21] * d[31] + 2 * d[15] * d[22] * d[31] + 2 * d[13] * d[24] * d[31] - d[12] * d[25] * d[31] + 2 * d[10] * d[19] * d[33] + 2 * d[13] * d[22] * d[33] - d[10] * d[18] * d[34] - d[9] * d[19] * d[34] - d[13] * d[21] * d[34] - d[12] * d[22] * d[34];
				coeffs[131] = -d[19] * d[25] * d[27] + 2 * d[19] * d[24] * d[28] - d[18] * d[25] * d[28] - d[22] * d[25] * d[30] + 2 * d[22] * d[24] * d[31] - d[21] * d[25] * d[31] + std::pow(d[19], 2) * d[33] + std::pow(d[22], 2) * d[33] - d[18] * d[19] * d[34] - d[21] * d[22] * d[34];
				coeffs[132] = -d[7] * d[27] * d[28] + d[6] * std::pow(d[28], 2) - d[7] * d[30] * d[31] + d[6] * std::pow(d[31], 2) + 2 * d[1] * d[28] * d[33] + 2 * d[4] * d[31] * d[33] - d[1] * d[27] * d[34] - d[0] * d[28] * d[34] - d[4] * d[30] * d[34] - d[3] * d[31] * d[34];
				coeffs[133] = -d[16] * d[27] * d[28] + d[15] * std::pow(d[28], 2) - d[16] * d[30] * d[31] + d[15] * std::pow(d[31], 2) + 2 * d[10] * d[28] * d[33] + 2 * d[13] * d[31] * d[33] - d[10] * d[27] * d[34] - d[9] * d[28] * d[34] - d[13] * d[30] * d[34] - d[12] * d[31] * d[34];
				coeffs[134] = -d[25] * d[27] * d[28] + d[24] * std::pow(d[28], 2) - d[25] * d[30] * d[31] + d[24] * std::pow(d[31], 2) + 2 * d[19] * d[28] * d[33] + 2 * d[22] * d[31] * d[33] - d[19] * d[27] * d[34] - d[18] * d[28] * d[34] - d[22] * d[30] * d[34] - d[21] * d[31] * d[34];
				coeffs[135] = std::pow(d[28], 2) * d[33] + std::pow(d[31], 2) * d[33] - d[27] * d[28] * d[34] - d[30] * d[31] * d[34];
				coeffs[136] = -d[1] * d[7] * d[36] + 2 * d[1] * d[6] * d[37] - d[0] * d[7] * d[37] - d[4] * d[7] * d[39] + 2 * d[4] * d[6] * d[40] - d[3] * d[7] * d[40] + std::pow(d[1], 2) * d[42] + std::pow(d[4], 2) * d[42] - d[0] * d[1] * d[43] - d[3] * d[4] * d[43];
				coeffs[137] = -d[7] * d[10] * d[36] - d[1] * d[16] * d[36] - d[7] * d[9] * d[37] + 2 * d[6] * d[10] * d[37] + 2 * d[1] * d[15] * d[37] - d[0] * d[16] * d[37] - d[7] * d[13] * d[39] - d[4] * d[16] * d[39] - d[7] * d[12] * d[40] + 2 * d[6] * d[13] * d[40] + 2 * d[4] * d[15] * d[40] - d[3] * d[16] * d[40] + 2 * d[1] * d[10] * d[42] + 2 * d[4] * d[13] * d[42] - d[1] * d[9] * d[43] - d[0] * d[10] * d[43] - d[4] * d[12] * d[43] - d[3] * d[13] * d[43];
				coeffs[138] = -d[10] * d[16] * d[36] + 2 * d[10] * d[15] * d[37] - d[9] * d[16] * d[37] - d[13] * d[16] * d[39] + 2 * d[13] * d[15] * d[40] - d[12] * d[16] * d[40] + std::pow(d[10], 2) * d[42] + std::pow(d[13], 2) * d[42] - d[9] * d[10] * d[43] - d[12] * d[13] * d[43];
				coeffs[139] = -d[7] * d[19] * d[36] - d[1] * d[25] * d[36] - d[7] * d[18] * d[37] + 2 * d[6] * d[19] * d[37] + 2 * d[1] * d[24] * d[37] - d[0] * d[25] * d[37] - d[7] * d[22] * d[39] - d[4] * d[25] * d[39] - d[7] * d[21] * d[40] + 2 * d[6] * d[22] * d[40] + 2 * d[4] * d[24] * d[40] - d[3] * d[25] * d[40] + 2 * d[1] * d[19] * d[42] + 2 * d[4] * d[22] * d[42] - d[1] * d[18] * d[43] - d[0] * d[19] * d[43] - d[4] * d[21] * d[43] - d[3] * d[22] * d[43];
				coeffs[140] = -d[16] * d[19] * d[36] - d[10] * d[25] * d[36] - d[16] * d[18] * d[37] + 2 * d[15] * d[19] * d[37] + 2 * d[10] * d[24] * d[37] - d[9] * d[25] * d[37] - d[16] * d[22] * d[39] - d[13] * d[25] * d[39] - d[16] * d[21] * d[40] + 2 * d[15] * d[22] * d[40] + 2 * d[13] * d[24] * d[40] - d[12] * d[25] * d[40] + 2 * d[10] * d[19] * d[42] + 2 * d[13] * d[22] * d[42] - d[10] * d[18] * d[43] - d[9] * d[19] * d[43] - d[13] * d[21] * d[43] - d[12] * d[22] * d[43];
				coeffs[141] = -d[19] * d[25] * d[36] + 2 * d[19] * d[24] * d[37] - d[18] * d[25] * d[37] - d[22] * d[25] * d[39] + 2 * d[22] * d[24] * d[40] - d[21] * d[25] * d[40] + std::pow(d[19], 2) * d[42] + std::pow(d[22], 2) * d[42] - d[18] * d[19] * d[43] - d[21] * d[22] * d[43];
				coeffs[142] = -d[7] * d[28] * d[36] - d[1] * d[34] * d[36] - d[7] * d[27] * d[37] + 2 * d[6] * d[28] * d[37] + 2 * d[1] * d[33] * d[37] - d[0] * d[34] * d[37] - d[7] * d[31] * d[39] - d[4] * d[34] * d[39] - d[7] * d[30] * d[40] + 2 * d[6] * d[31] * d[40] + 2 * d[4] * d[33] * d[40] - d[3] * d[34] * d[40] + 2 * d[1] * d[28] * d[42] + 2 * d[4] * d[31] * d[42] - d[1] * d[27] * d[43] - d[0] * d[28] * d[43] - d[4] * d[30] * d[43] - d[3] * d[31] * d[43];
				coeffs[143] = -d[16] * d[28] * d[36] - d[10] * d[34] * d[36] - d[16] * d[27] * d[37] + 2 * d[15] * d[28] * d[37] + 2 * d[10] * d[33] * d[37] - d[9] * d[34] * d[37] - d[16] * d[31] * d[39] - d[13] * d[34] * d[39] - d[16] * d[30] * d[40] + 2 * d[15] * d[31] * d[40] + 2 * d[13] * d[33] * d[40] - d[12] * d[34] * d[40] + 2 * d[10] * d[28] * d[42] + 2 * d[13] * d[31] * d[42] - d[10] * d[27] * d[43] - d[9] * d[28] * d[43] - d[13] * d[30] * d[43] - d[12] * d[31] * d[43];
				coeffs[144] = -d[25] * d[28] * d[36] - d[19] * d[34] * d[36] - d[25] * d[27] * d[37] + 2 * d[24] * d[28] * d[37] + 2 * d[19] * d[33] * d[37] - d[18] * d[34] * d[37] - d[25] * d[31] * d[39] - d[22] * d[34] * d[39] - d[25] * d[30] * d[40] + 2 * d[24] * d[31] * d[40] + 2 * d[22] * d[33] * d[40] - d[21] * d[34] * d[40] + 2 * d[19] * d[28] * d[42] + 2 * d[22] * d[31] * d[42] - d[19] * d[27] * d[43] - d[18] * d[28] * d[43] - d[22] * d[30] * d[43] - d[21] * d[31] * d[43];
				coeffs[145] = -d[28] * d[34] * d[36] + 2 * d[28] * d[33] * d[37] - d[27] * d[34] * d[37] - d[31] * d[34] * d[39] + 2 * d[31] * d[33] * d[40] - d[30] * d[34] * d[40] + std::pow(d[28], 2) * d[42] + std::pow(d[31], 2) * d[42] - d[27] * d[28] * d[43] - d[30] * d[31] * d[43];
				coeffs[146] = -d[7] * d[36] * d[37] + d[6] * std::pow(d[37], 2) - d[7] * d[39] * d[40] + d[6] * std::pow(d[40], 2) + 2 * d[1] * d[37] * d[42] + 2 * d[4] * d[40] * d[42] - d[1] * d[36] * d[43] - d[0] * d[37] * d[43] - d[4] * d[39] * d[43] - d[3] * d[40] * d[43];
				coeffs[147] = -d[16] * d[36] * d[37] + d[15] * std::pow(d[37], 2) - d[16] * d[39] * d[40] + d[15] * std::pow(d[40], 2) + 2 * d[10] * d[37] * d[42] + 2 * d[13] * d[40] * d[42] - d[10] * d[36] * d[43] - d[9] * d[37] * d[43] - d[13] * d[39] * d[43] - d[12] * d[40] * d[43];
				coeffs[148] = -d[25] * d[36] * d[37] + d[24] * std::pow(d[37], 2) - d[25] * d[39] * d[40] + d[24] * std::pow(d[40], 2) + 2 * d[19] * d[37] * d[42] + 2 * d[22] * d[40] * d[42] - d[19] * d[36] * d[43] - d[18] * d[37] * d[43] - d[22] * d[39] * d[43] - d[21] * d[40] * d[43];
				coeffs[149] = -d[34] * d[36] * d[37] + d[33] * std::pow(d[37], 2) - d[34] * d[39] * d[40] + d[33] * std::pow(d[40], 2) + 2 * d[28] * d[37] * d[42] + 2 * d[31] * d[40] * d[42] - d[28] * d[36] * d[43] - d[27] * d[37] * d[43] - d[31] * d[39] * d[43] - d[30] * d[40] * d[43];
				coeffs[150] = std::pow(d[37], 2) * d[42] + std::pow(d[40], 2) * d[42] - d[36] * d[37] * d[43] - d[39] * d[40] * d[43];
				coeffs[151] = -d[6];
				coeffs[152] = -d[15];
				coeffs[153] = -d[24];
				coeffs[154] = -d[33];
				coeffs[155] = -d[42];
				coeffs[156] = d[0] * d[1] * d[6] + d[3] * d[4] * d[6] + std::pow(d[1], 2) * d[7] + std::pow(d[4], 2) * d[7] - d[7] * std::pow(d[8], 2);
				coeffs[157] = d[1] * d[6] * d[9] + d[0] * d[6] * d[10] + 2 * d[1] * d[7] * d[10] + d[4] * d[6] * d[12] + d[3] * d[6] * d[13] + 2 * d[4] * d[7] * d[13] + d[0] * d[1] * d[15] + d[3] * d[4] * d[15] + std::pow(d[1], 2) * d[16] + std::pow(d[4], 2) * d[16] - std::pow(d[8], 2) * d[16] - 2 * d[7] * d[8] * d[17];
				coeffs[158] = d[6] * d[9] * d[10] + d[7] * std::pow(d[10], 2) + d[6] * d[12] * d[13] + d[7] * std::pow(d[13], 2) + d[1] * d[9] * d[15] + d[0] * d[10] * d[15] + d[4] * d[12] * d[15] + d[3] * d[13] * d[15] + 2 * d[1] * d[10] * d[16] + 2 * d[4] * d[13] * d[16] - 2 * d[8] * d[16] * d[17] - d[7] * std::pow(d[17], 2);
				coeffs[159] = d[9] * d[10] * d[15] + d[12] * d[13] * d[15] + std::pow(d[10], 2) * d[16] + std::pow(d[13], 2) * d[16] - d[16] * std::pow(d[17], 2);
				coeffs[160] = d[1] * d[6] * d[18] + d[0] * d[6] * d[19] + 2 * d[1] * d[7] * d[19] + d[4] * d[6] * d[21] + d[3] * d[6] * d[22] + 2 * d[4] * d[7] * d[22] + d[0] * d[1] * d[24] + d[3] * d[4] * d[24] + std::pow(d[1], 2) * d[25] + std::pow(d[4], 2) * d[25] - std::pow(d[8], 2) * d[25] - 2 * d[7] * d[8] * d[26];
				coeffs[161] = d[6] * d[10] * d[18] + d[1] * d[15] * d[18] + d[6] * d[9] * d[19] + 2 * d[7] * d[10] * d[19] + d[0] * d[15] * d[19] + 2 * d[1] * d[16] * d[19] + d[6] * d[13] * d[21] + d[4] * d[15] * d[21] + d[6] * d[12] * d[22] + 2 * d[7] * d[13] * d[22] + d[3] * d[15] * d[22] + 2 * d[4] * d[16] * d[22] + d[1] * d[9] * d[24] + d[0] * d[10] * d[24] + d[4] * d[12] * d[24] + d[3] * d[13] * d[24] + 2 * d[1] * d[10] * d[25] + 2 * d[4] * d[13] * d[25] - 2 * d[8] * d[17] * d[25] - 2 * d[8] * d[16] * d[26] - 2 * d[7] * d[17] * d[26];
				coeffs[162] = d[10] * d[15] * d[18] + d[9] * d[15] * d[19] + 2 * d[10] * d[16] * d[19] + d[13] * d[15] * d[21] + d[12] * d[15] * d[22] + 2 * d[13] * d[16] * d[22] + d[9] * d[10] * d[24] + d[12] * d[13] * d[24] + std::pow(d[10], 2) * d[25] + std::pow(d[13], 2) * d[25] - std::pow(d[17], 2) * d[25] - 2 * d[16] * d[17] * d[26];
				coeffs[163] = d[6] * d[18] * d[19] + d[7] * std::pow(d[19], 2) + d[6] * d[21] * d[22] + d[7] * std::pow(d[22], 2) + d[1] * d[18] * d[24] + d[0] * d[19] * d[24] + d[4] * d[21] * d[24] + d[3] * d[22] * d[24] + 2 * d[1] * d[19] * d[25] + 2 * d[4] * d[22] * d[25] - 2 * d[8] * d[25] * d[26] - d[7] * std::pow(d[26], 2);
				coeffs[164] = d[15] * d[18] * d[19] + d[16] * std::pow(d[19], 2) + d[15] * d[21] * d[22] + d[16] * std::pow(d[22], 2) + d[10] * d[18] * d[24] + d[9] * d[19] * d[24] + d[13] * d[21] * d[24] + d[12] * d[22] * d[24] + 2 * d[10] * d[19] * d[25] + 2 * d[13] * d[22] * d[25] - 2 * d[17] * d[25] * d[26] - d[16] * std::pow(d[26], 2);
				coeffs[165] = d[18] * d[19] * d[24] + d[21] * d[22] * d[24] + std::pow(d[19], 2) * d[25] + std::pow(d[22], 2) * d[25] - d[25] * std::pow(d[26], 2);
				coeffs[166] = d[1] * d[6] * d[27] + d[0] * d[6] * d[28] + 2 * d[1] * d[7] * d[28] + d[4] * d[6] * d[30] + d[3] * d[6] * d[31] + 2 * d[4] * d[7] * d[31] + d[0] * d[1] * d[33] + d[3] * d[4] * d[33] + std::pow(d[1], 2) * d[34] + std::pow(d[4], 2) * d[34] - std::pow(d[8], 2) * d[34] - 2 * d[7] * d[8] * d[35];
				coeffs[167] = d[6] * d[10] * d[27] + d[1] * d[15] * d[27] + d[6] * d[9] * d[28] + 2 * d[7] * d[10] * d[28] + d[0] * d[15] * d[28] + 2 * d[1] * d[16] * d[28] + d[6] * d[13] * d[30] + d[4] * d[15] * d[30] + d[6] * d[12] * d[31] + 2 * d[7] * d[13] * d[31] + d[3] * d[15] * d[31] + 2 * d[4] * d[16] * d[31] + d[1] * d[9] * d[33] + d[0] * d[10] * d[33] + d[4] * d[12] * d[33] + d[3] * d[13] * d[33] + 2 * d[1] * d[10] * d[34] + 2 * d[4] * d[13] * d[34] - 2 * d[8] * d[17] * d[34] - 2 * d[8] * d[16] * d[35] - 2 * d[7] * d[17] * d[35];
				coeffs[168] = d[10] * d[15] * d[27] + d[9] * d[15] * d[28] + 2 * d[10] * d[16] * d[28] + d[13] * d[15] * d[30] + d[12] * d[15] * d[31] + 2 * d[13] * d[16] * d[31] + d[9] * d[10] * d[33] + d[12] * d[13] * d[33] + std::pow(d[10], 2) * d[34] + std::pow(d[13], 2) * d[34] - std::pow(d[17], 2) * d[34] - 2 * d[16] * d[17] * d[35];
				coeffs[169] = d[6] * d[19] * d[27] + d[1] * d[24] * d[27] + d[6] * d[18] * d[28] + 2 * d[7] * d[19] * d[28] + d[0] * d[24] * d[28] + 2 * d[1] * d[25] * d[28] + d[6] * d[22] * d[30] + d[4] * d[24] * d[30] + d[6] * d[21] * d[31] + 2 * d[7] * d[22] * d[31] + d[3] * d[24] * d[31] + 2 * d[4] * d[25] * d[31] + d[1] * d[18] * d[33] + d[0] * d[19] * d[33] + d[4] * d[21] * d[33] + d[3] * d[22] * d[33] + 2 * d[1] * d[19] * d[34] + 2 * d[4] * d[22] * d[34] - 2 * d[8] * d[26] * d[34] - 2 * d[8] * d[25] * d[35] - 2 * d[7] * d[26] * d[35];
				coeffs[170] = d[15] * d[19] * d[27] + d[10] * d[24] * d[27] + d[15] * d[18] * d[28] + 2 * d[16] * d[19] * d[28] + d[9] * d[24] * d[28] + 2 * d[10] * d[25] * d[28] + d[15] * d[22] * d[30] + d[13] * d[24] * d[30] + d[15] * d[21] * d[31] + 2 * d[16] * d[22] * d[31] + d[12] * d[24] * d[31] + 2 * d[13] * d[25] * d[31] + d[10] * d[18] * d[33] + d[9] * d[19] * d[33] + d[13] * d[21] * d[33] + d[12] * d[22] * d[33] + 2 * d[10] * d[19] * d[34] + 2 * d[13] * d[22] * d[34] - 2 * d[17] * d[26] * d[34] - 2 * d[17] * d[25] * d[35] - 2 * d[16] * d[26] * d[35];
				coeffs[171] = d[19] * d[24] * d[27] + d[18] * d[24] * d[28] + 2 * d[19] * d[25] * d[28] + d[22] * d[24] * d[30] + d[21] * d[24] * d[31] + 2 * d[22] * d[25] * d[31] + d[18] * d[19] * d[33] + d[21] * d[22] * d[33] + std::pow(d[19], 2) * d[34] + std::pow(d[22], 2) * d[34] - std::pow(d[26], 2) * d[34] - 2 * d[25] * d[26] * d[35];
				coeffs[172] = d[6] * d[27] * d[28] + d[7] * std::pow(d[28], 2) + d[6] * d[30] * d[31] + d[7] * std::pow(d[31], 2) + d[1] * d[27] * d[33] + d[0] * d[28] * d[33] + d[4] * d[30] * d[33] + d[3] * d[31] * d[33] + 2 * d[1] * d[28] * d[34] + 2 * d[4] * d[31] * d[34] - 2 * d[8] * d[34] * d[35] - d[7] * std::pow(d[35], 2);
				coeffs[173] = d[15] * d[27] * d[28] + d[16] * std::pow(d[28], 2) + d[15] * d[30] * d[31] + d[16] * std::pow(d[31], 2) + d[10] * d[27] * d[33] + d[9] * d[28] * d[33] + d[13] * d[30] * d[33] + d[12] * d[31] * d[33] + 2 * d[10] * d[28] * d[34] + 2 * d[13] * d[31] * d[34] - 2 * d[17] * d[34] * d[35] - d[16] * std::pow(d[35], 2);
				coeffs[174] = d[24] * d[27] * d[28] + d[25] * std::pow(d[28], 2) + d[24] * d[30] * d[31] + d[25] * std::pow(d[31], 2) + d[19] * d[27] * d[33] + d[18] * d[28] * d[33] + d[22] * d[30] * d[33] + d[21] * d[31] * d[33] + 2 * d[19] * d[28] * d[34] + 2 * d[22] * d[31] * d[34] - 2 * d[26] * d[34] * d[35] - d[25] * std::pow(d[35], 2);
				coeffs[175] = d[27] * d[28] * d[33] + d[30] * d[31] * d[33] + std::pow(d[28], 2) * d[34] + std::pow(d[31], 2) * d[34] - d[34] * std::pow(d[35], 2);
				coeffs[176] = d[1] * d[6] * d[36] + d[0] * d[6] * d[37] + 2 * d[1] * d[7] * d[37] + d[4] * d[6] * d[39] + d[3] * d[6] * d[40] + 2 * d[4] * d[7] * d[40] + d[0] * d[1] * d[42] + d[3] * d[4] * d[42] + std::pow(d[1], 2) * d[43] + std::pow(d[4], 2) * d[43] - std::pow(d[8], 2) * d[43] - 2 * d[7] * d[8] * d[44];
				coeffs[177] = d[6] * d[10] * d[36] + d[1] * d[15] * d[36] + d[6] * d[9] * d[37] + 2 * d[7] * d[10] * d[37] + d[0] * d[15] * d[37] + 2 * d[1] * d[16] * d[37] + d[6] * d[13] * d[39] + d[4] * d[15] * d[39] + d[6] * d[12] * d[40] + 2 * d[7] * d[13] * d[40] + d[3] * d[15] * d[40] + 2 * d[4] * d[16] * d[40] + d[1] * d[9] * d[42] + d[0] * d[10] * d[42] + d[4] * d[12] * d[42] + d[3] * d[13] * d[42] + 2 * d[1] * d[10] * d[43] + 2 * d[4] * d[13] * d[43] - 2 * d[8] * d[17] * d[43] - 2 * d[8] * d[16] * d[44] - 2 * d[7] * d[17] * d[44];
				coeffs[178] = d[10] * d[15] * d[36] + d[9] * d[15] * d[37] + 2 * d[10] * d[16] * d[37] + d[13] * d[15] * d[39] + d[12] * d[15] * d[40] + 2 * d[13] * d[16] * d[40] + d[9] * d[10] * d[42] + d[12] * d[13] * d[42] + std::pow(d[10], 2) * d[43] + std::pow(d[13], 2) * d[43] - std::pow(d[17], 2) * d[43] - 2 * d[16] * d[17] * d[44];
				coeffs[179] = d[6] * d[19] * d[36] + d[1] * d[24] * d[36] + d[6] * d[18] * d[37] + 2 * d[7] * d[19] * d[37] + d[0] * d[24] * d[37] + 2 * d[1] * d[25] * d[37] + d[6] * d[22] * d[39] + d[4] * d[24] * d[39] + d[6] * d[21] * d[40] + 2 * d[7] * d[22] * d[40] + d[3] * d[24] * d[40] + 2 * d[4] * d[25] * d[40] + d[1] * d[18] * d[42] + d[0] * d[19] * d[42] + d[4] * d[21] * d[42] + d[3] * d[22] * d[42] + 2 * d[1] * d[19] * d[43] + 2 * d[4] * d[22] * d[43] - 2 * d[8] * d[26] * d[43] - 2 * d[8] * d[25] * d[44] - 2 * d[7] * d[26] * d[44];
				coeffs[180] = d[15] * d[19] * d[36] + d[10] * d[24] * d[36] + d[15] * d[18] * d[37] + 2 * d[16] * d[19] * d[37] + d[9] * d[24] * d[37] + 2 * d[10] * d[25] * d[37] + d[15] * d[22] * d[39] + d[13] * d[24] * d[39] + d[15] * d[21] * d[40] + 2 * d[16] * d[22] * d[40] + d[12] * d[24] * d[40] + 2 * d[13] * d[25] * d[40] + d[10] * d[18] * d[42] + d[9] * d[19] * d[42] + d[13] * d[21] * d[42] + d[12] * d[22] * d[42] + 2 * d[10] * d[19] * d[43] + 2 * d[13] * d[22] * d[43] - 2 * d[17] * d[26] * d[43] - 2 * d[17] * d[25] * d[44] - 2 * d[16] * d[26] * d[44];
				coeffs[181] = d[19] * d[24] * d[36] + d[18] * d[24] * d[37] + 2 * d[19] * d[25] * d[37] + d[22] * d[24] * d[39] + d[21] * d[24] * d[40] + 2 * d[22] * d[25] * d[40] + d[18] * d[19] * d[42] + d[21] * d[22] * d[42] + std::pow(d[19], 2) * d[43] + std::pow(d[22], 2) * d[43] - std::pow(d[26], 2) * d[43] - 2 * d[25] * d[26] * d[44];
				coeffs[182] = d[6] * d[28] * d[36] + d[1] * d[33] * d[36] + d[6] * d[27] * d[37] + 2 * d[7] * d[28] * d[37] + d[0] * d[33] * d[37] + 2 * d[1] * d[34] * d[37] + d[6] * d[31] * d[39] + d[4] * d[33] * d[39] + d[6] * d[30] * d[40] + 2 * d[7] * d[31] * d[40] + d[3] * d[33] * d[40] + 2 * d[4] * d[34] * d[40] + d[1] * d[27] * d[42] + d[0] * d[28] * d[42] + d[4] * d[30] * d[42] + d[3] * d[31] * d[42] + 2 * d[1] * d[28] * d[43] + 2 * d[4] * d[31] * d[43] - 2 * d[8] * d[35] * d[43] - 2 * d[8] * d[34] * d[44] - 2 * d[7] * d[35] * d[44];
				coeffs[183] = d[15] * d[28] * d[36] + d[10] * d[33] * d[36] + d[15] * d[27] * d[37] + 2 * d[16] * d[28] * d[37] + d[9] * d[33] * d[37] + 2 * d[10] * d[34] * d[37] + d[15] * d[31] * d[39] + d[13] * d[33] * d[39] + d[15] * d[30] * d[40] + 2 * d[16] * d[31] * d[40] + d[12] * d[33] * d[40] + 2 * d[13] * d[34] * d[40] + d[10] * d[27] * d[42] + d[9] * d[28] * d[42] + d[13] * d[30] * d[42] + d[12] * d[31] * d[42] + 2 * d[10] * d[28] * d[43] + 2 * d[13] * d[31] * d[43] - 2 * d[17] * d[35] * d[43] - 2 * d[17] * d[34] * d[44] - 2 * d[16] * d[35] * d[44];
				coeffs[184] = d[24] * d[28] * d[36] + d[19] * d[33] * d[36] + d[24] * d[27] * d[37] + 2 * d[25] * d[28] * d[37] + d[18] * d[33] * d[37] + 2 * d[19] * d[34] * d[37] + d[24] * d[31] * d[39] + d[22] * d[33] * d[39] + d[24] * d[30] * d[40] + 2 * d[25] * d[31] * d[40] + d[21] * d[33] * d[40] + 2 * d[22] * d[34] * d[40] + d[19] * d[27] * d[42] + d[18] * d[28] * d[42] + d[22] * d[30] * d[42] + d[21] * d[31] * d[42] + 2 * d[19] * d[28] * d[43] + 2 * d[22] * d[31] * d[43] - 2 * d[26] * d[35] * d[43] - 2 * d[26] * d[34] * d[44] - 2 * d[25] * d[35] * d[44];
				coeffs[185] = d[28] * d[33] * d[36] + d[27] * d[33] * d[37] + 2 * d[28] * d[34] * d[37] + d[31] * d[33] * d[39] + d[30] * d[33] * d[40] + 2 * d[31] * d[34] * d[40] + d[27] * d[28] * d[42] + d[30] * d[31] * d[42] + std::pow(d[28], 2) * d[43] + std::pow(d[31], 2) * d[43] - std::pow(d[35], 2) * d[43] - 2 * d[34] * d[35] * d[44];
				coeffs[186] = d[6] * d[36] * d[37] + d[7] * std::pow(d[37], 2) + d[6] * d[39] * d[40] + d[7] * std::pow(d[40], 2) + d[1] * d[36] * d[42] + d[0] * d[37] * d[42] + d[4] * d[39] * d[42] + d[3] * d[40] * d[42] + 2 * d[1] * d[37] * d[43] + 2 * d[4] * d[40] * d[43] - 2 * d[8] * d[43] * d[44] - d[7] * std::pow(d[44], 2);
				coeffs[187] = d[15] * d[36] * d[37] + d[16] * std::pow(d[37], 2) + d[15] * d[39] * d[40] + d[16] * std::pow(d[40], 2) + d[10] * d[36] * d[42] + d[9] * d[37] * d[42] + d[13] * d[39] * d[42] + d[12] * d[40] * d[42] + 2 * d[10] * d[37] * d[43] + 2 * d[13] * d[40] * d[43] - 2 * d[17] * d[43] * d[44] - d[16] * std::pow(d[44], 2);
				coeffs[188] = d[24] * d[36] * d[37] + d[25] * std::pow(d[37], 2) + d[24] * d[39] * d[40] + d[25] * std::pow(d[40], 2) + d[19] * d[36] * d[42] + d[18] * d[37] * d[42] + d[22] * d[39] * d[42] + d[21] * d[40] * d[42] + 2 * d[19] * d[37] * d[43] + 2 * d[22] * d[40] * d[43] - 2 * d[26] * d[43] * d[44] - d[25] * std::pow(d[44], 2);
				coeffs[189] = d[33] * d[36] * d[37] + d[34] * std::pow(d[37], 2) + d[33] * d[39] * d[40] + d[34] * std::pow(d[40], 2) + d[28] * d[36] * d[42] + d[27] * d[37] * d[42] + d[31] * d[39] * d[42] + d[30] * d[40] * d[42] + 2 * d[28] * d[37] * d[43] + 2 * d[31] * d[40] * d[43] - 2 * d[35] * d[43] * d[44] - d[34] * std::pow(d[44], 2);
				coeffs[190] = d[36] * d[37] * d[42] + d[39] * d[40] * d[42] + std::pow(d[37], 2) * d[43] + std::pow(d[40], 2) * d[43] - d[43] * std::pow(d[44], 2);
				coeffs[191] = d[2] * std::pow(d[3], 2) + d[2] * std::pow(d[4], 2) - d[0] * d[3] * d[5] - d[1] * d[4] * d[5];
				coeffs[192] = -d[3] * d[5] * d[9] - d[4] * d[5] * d[10] + std::pow(d[3], 2) * d[11] + std::pow(d[4], 2) * d[11] + 2 * d[2] * d[3] * d[12] - d[0] * d[5] * d[12] + 2 * d[2] * d[4] * d[13] - d[1] * d[5] * d[13] - d[0] * d[3] * d[14] - d[1] * d[4] * d[14];
				coeffs[193] = -d[5] * d[9] * d[12] + 2 * d[3] * d[11] * d[12] + d[2] * std::pow(d[12], 2) - d[5] * d[10] * d[13] + 2 * d[4] * d[11] * d[13] + d[2] * std::pow(d[13], 2) - d[3] * d[9] * d[14] - d[4] * d[10] * d[14] - d[0] * d[12] * d[14] - d[1] * d[13] * d[14];
				coeffs[194] = d[11] * std::pow(d[12], 2) + d[11] * std::pow(d[13], 2) - d[9] * d[12] * d[14] - d[10] * d[13] * d[14];
				coeffs[195] = -d[3] * d[5] * d[18] - d[4] * d[5] * d[19] + std::pow(d[3], 2) * d[20] + std::pow(d[4], 2) * d[20] + 2 * d[2] * d[3] * d[21] - d[0] * d[5] * d[21] + 2 * d[2] * d[4] * d[22] - d[1] * d[5] * d[22] - d[0] * d[3] * d[23] - d[1] * d[4] * d[23];
				coeffs[196] = -d[5] * d[12] * d[18] - d[3] * d[14] * d[18] - d[5] * d[13] * d[19] - d[4] * d[14] * d[19] + 2 * d[3] * d[12] * d[20] + 2 * d[4] * d[13] * d[20] - d[5] * d[9] * d[21] + 2 * d[3] * d[11] * d[21] + 2 * d[2] * d[12] * d[21] - d[0] * d[14] * d[21] - d[5] * d[10] * d[22] + 2 * d[4] * d[11] * d[22] + 2 * d[2] * d[13] * d[22] - d[1] * d[14] * d[22] - d[3] * d[9] * d[23] - d[4] * d[10] * d[23] - d[0] * d[12] * d[23] - d[1] * d[13] * d[23];
				coeffs[197] = -d[12] * d[14] * d[18] - d[13] * d[14] * d[19] + std::pow(d[12], 2) * d[20] + std::pow(d[13], 2) * d[20] + 2 * d[11] * d[12] * d[21] - d[9] * d[14] * d[21] + 2 * d[11] * d[13] * d[22] - d[10] * d[14] * d[22] - d[9] * d[12] * d[23] - d[10] * d[13] * d[23];
				coeffs[198] = -d[5] * d[18] * d[21] + 2 * d[3] * d[20] * d[21] + d[2] * std::pow(d[21], 2) - d[5] * d[19] * d[22] + 2 * d[4] * d[20] * d[22] + d[2] * std::pow(d[22], 2) - d[3] * d[18] * d[23] - d[4] * d[19] * d[23] - d[0] * d[21] * d[23] - d[1] * d[22] * d[23];
				coeffs[199] = -d[14] * d[18] * d[21] + 2 * d[12] * d[20] * d[21] + d[11] * std::pow(d[21], 2) - d[14] * d[19] * d[22] + 2 * d[13] * d[20] * d[22] + d[11] * std::pow(d[22], 2) - d[12] * d[18] * d[23] - d[13] * d[19] * d[23] - d[9] * d[21] * d[23] - d[10] * d[22] * d[23];
				coeffs[200] = d[20] * std::pow(d[21], 2) + d[20] * std::pow(d[22], 2) - d[18] * d[21] * d[23] - d[19] * d[22] * d[23];
				coeffs[201] = -d[3] * d[5] * d[27] - d[4] * d[5] * d[28] + std::pow(d[3], 2) * d[29] + std::pow(d[4], 2) * d[29] + 2 * d[2] * d[3] * d[30] - d[0] * d[5] * d[30] + 2 * d[2] * d[4] * d[31] - d[1] * d[5] * d[31] - d[0] * d[3] * d[32] - d[1] * d[4] * d[32];
				coeffs[202] = -d[5] * d[12] * d[27] - d[3] * d[14] * d[27] - d[5] * d[13] * d[28] - d[4] * d[14] * d[28] + 2 * d[3] * d[12] * d[29] + 2 * d[4] * d[13] * d[29] - d[5] * d[9] * d[30] + 2 * d[3] * d[11] * d[30] + 2 * d[2] * d[12] * d[30] - d[0] * d[14] * d[30] - d[5] * d[10] * d[31] + 2 * d[4] * d[11] * d[31] + 2 * d[2] * d[13] * d[31] - d[1] * d[14] * d[31] - d[3] * d[9] * d[32] - d[4] * d[10] * d[32] - d[0] * d[12] * d[32] - d[1] * d[13] * d[32];
				coeffs[203] = -d[12] * d[14] * d[27] - d[13] * d[14] * d[28] + std::pow(d[12], 2) * d[29] + std::pow(d[13], 2) * d[29] + 2 * d[11] * d[12] * d[30] - d[9] * d[14] * d[30] + 2 * d[11] * d[13] * d[31] - d[10] * d[14] * d[31] - d[9] * d[12] * d[32] - d[10] * d[13] * d[32];
				coeffs[204] = -d[5] * d[21] * d[27] - d[3] * d[23] * d[27] - d[5] * d[22] * d[28] - d[4] * d[23] * d[28] + 2 * d[3] * d[21] * d[29] + 2 * d[4] * d[22] * d[29] - d[5] * d[18] * d[30] + 2 * d[3] * d[20] * d[30] + 2 * d[2] * d[21] * d[30] - d[0] * d[23] * d[30] - d[5] * d[19] * d[31] + 2 * d[4] * d[20] * d[31] + 2 * d[2] * d[22] * d[31] - d[1] * d[23] * d[31] - d[3] * d[18] * d[32] - d[4] * d[19] * d[32] - d[0] * d[21] * d[32] - d[1] * d[22] * d[32];
				coeffs[205] = -d[14] * d[21] * d[27] - d[12] * d[23] * d[27] - d[14] * d[22] * d[28] - d[13] * d[23] * d[28] + 2 * d[12] * d[21] * d[29] + 2 * d[13] * d[22] * d[29] - d[14] * d[18] * d[30] + 2 * d[12] * d[20] * d[30] + 2 * d[11] * d[21] * d[30] - d[9] * d[23] * d[30] - d[14] * d[19] * d[31] + 2 * d[13] * d[20] * d[31] + 2 * d[11] * d[22] * d[31] - d[10] * d[23] * d[31] - d[12] * d[18] * d[32] - d[13] * d[19] * d[32] - d[9] * d[21] * d[32] - d[10] * d[22] * d[32];
				coeffs[206] = -d[21] * d[23] * d[27] - d[22] * d[23] * d[28] + std::pow(d[21], 2) * d[29] + std::pow(d[22], 2) * d[29] + 2 * d[20] * d[21] * d[30] - d[18] * d[23] * d[30] + 2 * d[20] * d[22] * d[31] - d[19] * d[23] * d[31] - d[18] * d[21] * d[32] - d[19] * d[22] * d[32];
				coeffs[207] = -d[5] * d[27] * d[30] + 2 * d[3] * d[29] * d[30] + d[2] * std::pow(d[30], 2) - d[5] * d[28] * d[31] + 2 * d[4] * d[29] * d[31] + d[2] * std::pow(d[31], 2) - d[3] * d[27] * d[32] - d[4] * d[28] * d[32] - d[0] * d[30] * d[32] - d[1] * d[31] * d[32];
				coeffs[208] = -d[14] * d[27] * d[30] + 2 * d[12] * d[29] * d[30] + d[11] * std::pow(d[30], 2) - d[14] * d[28] * d[31] + 2 * d[13] * d[29] * d[31] + d[11] * std::pow(d[31], 2) - d[12] * d[27] * d[32] - d[13] * d[28] * d[32] - d[9] * d[30] * d[32] - d[10] * d[31] * d[32];
				coeffs[209] = -d[23] * d[27] * d[30] + 2 * d[21] * d[29] * d[30] + d[20] * std::pow(d[30], 2) - d[23] * d[28] * d[31] + 2 * d[22] * d[29] * d[31] + d[20] * std::pow(d[31], 2) - d[21] * d[27] * d[32] - d[22] * d[28] * d[32] - d[18] * d[30] * d[32] - d[19] * d[31] * d[32];
				coeffs[210] = d[29] * std::pow(d[30], 2) + d[29] * std::pow(d[31], 2) - d[27] * d[30] * d[32] - d[28] * d[31] * d[32];
				coeffs[211] = -d[3] * d[5] * d[36] - d[4] * d[5] * d[37] + std::pow(d[3], 2) * d[38] + std::pow(d[4], 2) * d[38] + 2 * d[2] * d[3] * d[39] - d[0] * d[5] * d[39] + 2 * d[2] * d[4] * d[40] - d[1] * d[5] * d[40] - d[0] * d[3] * d[41] - d[1] * d[4] * d[41];
				coeffs[212] = -d[5] * d[12] * d[36] - d[3] * d[14] * d[36] - d[5] * d[13] * d[37] - d[4] * d[14] * d[37] + 2 * d[3] * d[12] * d[38] + 2 * d[4] * d[13] * d[38] - d[5] * d[9] * d[39] + 2 * d[3] * d[11] * d[39] + 2 * d[2] * d[12] * d[39] - d[0] * d[14] * d[39] - d[5] * d[10] * d[40] + 2 * d[4] * d[11] * d[40] + 2 * d[2] * d[13] * d[40] - d[1] * d[14] * d[40] - d[3] * d[9] * d[41] - d[4] * d[10] * d[41] - d[0] * d[12] * d[41] - d[1] * d[13] * d[41];
				coeffs[213] = -d[12] * d[14] * d[36] - d[13] * d[14] * d[37] + std::pow(d[12], 2) * d[38] + std::pow(d[13], 2) * d[38] + 2 * d[11] * d[12] * d[39] - d[9] * d[14] * d[39] + 2 * d[11] * d[13] * d[40] - d[10] * d[14] * d[40] - d[9] * d[12] * d[41] - d[10] * d[13] * d[41];
				coeffs[214] = -d[5] * d[21] * d[36] - d[3] * d[23] * d[36] - d[5] * d[22] * d[37] - d[4] * d[23] * d[37] + 2 * d[3] * d[21] * d[38] + 2 * d[4] * d[22] * d[38] - d[5] * d[18] * d[39] + 2 * d[3] * d[20] * d[39] + 2 * d[2] * d[21] * d[39] - d[0] * d[23] * d[39] - d[5] * d[19] * d[40] + 2 * d[4] * d[20] * d[40] + 2 * d[2] * d[22] * d[40] - d[1] * d[23] * d[40] - d[3] * d[18] * d[41] - d[4] * d[19] * d[41] - d[0] * d[21] * d[41] - d[1] * d[22] * d[41];
				coeffs[215] = -d[14] * d[21] * d[36] - d[12] * d[23] * d[36] - d[14] * d[22] * d[37] - d[13] * d[23] * d[37] + 2 * d[12] * d[21] * d[38] + 2 * d[13] * d[22] * d[38] - d[14] * d[18] * d[39] + 2 * d[12] * d[20] * d[39] + 2 * d[11] * d[21] * d[39] - d[9] * d[23] * d[39] - d[14] * d[19] * d[40] + 2 * d[13] * d[20] * d[40] + 2 * d[11] * d[22] * d[40] - d[10] * d[23] * d[40] - d[12] * d[18] * d[41] - d[13] * d[19] * d[41] - d[9] * d[21] * d[41] - d[10] * d[22] * d[41];
				coeffs[216] = -d[21] * d[23] * d[36] - d[22] * d[23] * d[37] + std::pow(d[21], 2) * d[38] + std::pow(d[22], 2) * d[38] + 2 * d[20] * d[21] * d[39] - d[18] * d[23] * d[39] + 2 * d[20] * d[22] * d[40] - d[19] * d[23] * d[40] - d[18] * d[21] * d[41] - d[19] * d[22] * d[41];
				coeffs[217] = -d[5] * d[30] * d[36] - d[3] * d[32] * d[36] - d[5] * d[31] * d[37] - d[4] * d[32] * d[37] + 2 * d[3] * d[30] * d[38] + 2 * d[4] * d[31] * d[38] - d[5] * d[27] * d[39] + 2 * d[3] * d[29] * d[39] + 2 * d[2] * d[30] * d[39] - d[0] * d[32] * d[39] - d[5] * d[28] * d[40] + 2 * d[4] * d[29] * d[40] + 2 * d[2] * d[31] * d[40] - d[1] * d[32] * d[40] - d[3] * d[27] * d[41] - d[4] * d[28] * d[41] - d[0] * d[30] * d[41] - d[1] * d[31] * d[41];
				coeffs[218] = -d[14] * d[30] * d[36] - d[12] * d[32] * d[36] - d[14] * d[31] * d[37] - d[13] * d[32] * d[37] + 2 * d[12] * d[30] * d[38] + 2 * d[13] * d[31] * d[38] - d[14] * d[27] * d[39] + 2 * d[12] * d[29] * d[39] + 2 * d[11] * d[30] * d[39] - d[9] * d[32] * d[39] - d[14] * d[28] * d[40] + 2 * d[13] * d[29] * d[40] + 2 * d[11] * d[31] * d[40] - d[10] * d[32] * d[40] - d[12] * d[27] * d[41] - d[13] * d[28] * d[41] - d[9] * d[30] * d[41] - d[10] * d[31] * d[41];
				coeffs[219] = -d[23] * d[30] * d[36] - d[21] * d[32] * d[36] - d[23] * d[31] * d[37] - d[22] * d[32] * d[37] + 2 * d[21] * d[30] * d[38] + 2 * d[22] * d[31] * d[38] - d[23] * d[27] * d[39] + 2 * d[21] * d[29] * d[39] + 2 * d[20] * d[30] * d[39] - d[18] * d[32] * d[39] - d[23] * d[28] * d[40] + 2 * d[22] * d[29] * d[40] + 2 * d[20] * d[31] * d[40] - d[19] * d[32] * d[40] - d[21] * d[27] * d[41] - d[22] * d[28] * d[41] - d[18] * d[30] * d[41] - d[19] * d[31] * d[41];
				coeffs[220] = -d[30] * d[32] * d[36] - d[31] * d[32] * d[37] + std::pow(d[30], 2) * d[38] + std::pow(d[31], 2) * d[38] + 2 * d[29] * d[30] * d[39] - d[27] * d[32] * d[39] + 2 * d[29] * d[31] * d[40] - d[28] * d[32] * d[40] - d[27] * d[30] * d[41] - d[28] * d[31] * d[41];
				coeffs[221] = -d[5] * d[36] * d[39] + 2 * d[3] * d[38] * d[39] + d[2] * std::pow(d[39], 2) - d[5] * d[37] * d[40] + 2 * d[4] * d[38] * d[40] + d[2] * std::pow(d[40], 2) - d[3] * d[36] * d[41] - d[4] * d[37] * d[41] - d[0] * d[39] * d[41] - d[1] * d[40] * d[41];
				coeffs[222] = -d[14] * d[36] * d[39] + 2 * d[12] * d[38] * d[39] + d[11] * std::pow(d[39], 2) - d[14] * d[37] * d[40] + 2 * d[13] * d[38] * d[40] + d[11] * std::pow(d[40], 2) - d[12] * d[36] * d[41] - d[13] * d[37] * d[41] - d[9] * d[39] * d[41] - d[10] * d[40] * d[41];
				coeffs[223] = -d[23] * d[36] * d[39] + 2 * d[21] * d[38] * d[39] + d[20] * std::pow(d[39], 2) - d[23] * d[37] * d[40] + 2 * d[22] * d[38] * d[40] + d[20] * std::pow(d[40], 2) - d[21] * d[36] * d[41] - d[22] * d[37] * d[41] - d[18] * d[39] * d[41] - d[19] * d[40] * d[41];
				coeffs[224] = -d[32] * d[36] * d[39] + 2 * d[30] * d[38] * d[39] + d[29] * std::pow(d[39], 2) - d[32] * d[37] * d[40] + 2 * d[31] * d[38] * d[40] + d[29] * std::pow(d[40], 2) - d[30] * d[36] * d[41] - d[31] * d[37] * d[41] - d[27] * d[39] * d[41] - d[28] * d[40] * d[41];
				coeffs[225] = d[38] * std::pow(d[39], 2) + d[38] * std::pow(d[40], 2) - d[36] * d[39] * d[41] - d[37] * d[40] * d[41];
				coeffs[226] = -d[2];
				coeffs[227] = -d[11];
				coeffs[228] = -d[20];
				coeffs[229] = -d[29];
				coeffs[230] = -d[38];
				coeffs[231] = d[0] * d[2] * d[3] + d[1] * d[2] * d[4] + std::pow(d[3], 2) * d[5] + std::pow(d[4], 2) * d[5] - d[5] * std::pow(d[8], 2);
				coeffs[232] = d[2] * d[3] * d[9] + d[2] * d[4] * d[10] + d[0] * d[3] * d[11] + d[1] * d[4] * d[11] + d[0] * d[2] * d[12] + 2 * d[3] * d[5] * d[12] + d[1] * d[2] * d[13] + 2 * d[4] * d[5] * d[13] + std::pow(d[3], 2) * d[14] + std::pow(d[4], 2) * d[14] - std::pow(d[8], 2) * d[14] - 2 * d[5] * d[8] * d[17];
				coeffs[233] = d[3] * d[9] * d[11] + d[4] * d[10] * d[11] + d[2] * d[9] * d[12] + d[0] * d[11] * d[12] + d[5] * std::pow(d[12], 2) + d[2] * d[10] * d[13] + d[1] * d[11] * d[13] + d[5] * std::pow(d[13], 2) + 2 * d[3] * d[12] * d[14] + 2 * d[4] * d[13] * d[14] - 2 * d[8] * d[14] * d[17] - d[5] * std::pow(d[17], 2);
				coeffs[234] = d[9] * d[11] * d[12] + d[10] * d[11] * d[13] + std::pow(d[12], 2) * d[14] + std::pow(d[13], 2) * d[14] - d[14] * std::pow(d[17], 2);
				coeffs[235] = d[2] * d[3] * d[18] + d[2] * d[4] * d[19] + d[0] * d[3] * d[20] + d[1] * d[4] * d[20] + d[0] * d[2] * d[21] + 2 * d[3] * d[5] * d[21] + d[1] * d[2] * d[22] + 2 * d[4] * d[5] * d[22] + std::pow(d[3], 2) * d[23] + std::pow(d[4], 2) * d[23] - std::pow(d[8], 2) * d[23] - 2 * d[5] * d[8] * d[26];
				coeffs[236] = d[3] * d[11] * d[18] + d[2] * d[12] * d[18] + d[4] * d[11] * d[19] + d[2] * d[13] * d[19] + d[3] * d[9] * d[20] + d[4] * d[10] * d[20] + d[0] * d[12] * d[20] + d[1] * d[13] * d[20] + d[2] * d[9] * d[21] + d[0] * d[11] * d[21] + 2 * d[5] * d[12] * d[21] + 2 * d[3] * d[14] * d[21] + d[2] * d[10] * d[22] + d[1] * d[11] * d[22] + 2 * d[5] * d[13] * d[22] + 2 * d[4] * d[14] * d[22] + 2 * d[3] * d[12] * d[23] + 2 * d[4] * d[13] * d[23] - 2 * d[8] * d[17] * d[23] - 2 * d[8] * d[14] * d[26] - 2 * d[5] * d[17] * d[26];
				coeffs[237] = d[11] * d[12] * d[18] + d[11] * d[13] * d[19] + d[9] * d[12] * d[20] + d[10] * d[13] * d[20] + d[9] * d[11] * d[21] + 2 * d[12] * d[14] * d[21] + d[10] * d[11] * d[22] + 2 * d[13] * d[14] * d[22] + std::pow(d[12], 2) * d[23] + std::pow(d[13], 2) * d[23] - std::pow(d[17], 2) * d[23] - 2 * d[14] * d[17] * d[26];
				coeffs[238] = d[3] * d[18] * d[20] + d[4] * d[19] * d[20] + d[2] * d[18] * d[21] + d[0] * d[20] * d[21] + d[5] * std::pow(d[21], 2) + d[2] * d[19] * d[22] + d[1] * d[20] * d[22] + d[5] * std::pow(d[22], 2) + 2 * d[3] * d[21] * d[23] + 2 * d[4] * d[22] * d[23] - 2 * d[8] * d[23] * d[26] - d[5] * std::pow(d[26], 2);
				coeffs[239] = d[12] * d[18] * d[20] + d[13] * d[19] * d[20] + d[11] * d[18] * d[21] + d[9] * d[20] * d[21] + d[14] * std::pow(d[21], 2) + d[11] * d[19] * d[22] + d[10] * d[20] * d[22] + d[14] * std::pow(d[22], 2) + 2 * d[12] * d[21] * d[23] + 2 * d[13] * d[22] * d[23] - 2 * d[17] * d[23] * d[26] - d[14] * std::pow(d[26], 2);
				coeffs[240] = d[18] * d[20] * d[21] + d[19] * d[20] * d[22] + std::pow(d[21], 2) * d[23] + std::pow(d[22], 2) * d[23] - d[23] * std::pow(d[26], 2);
				coeffs[241] = d[2] * d[3] * d[27] + d[2] * d[4] * d[28] + d[0] * d[3] * d[29] + d[1] * d[4] * d[29] + d[0] * d[2] * d[30] + 2 * d[3] * d[5] * d[30] + d[1] * d[2] * d[31] + 2 * d[4] * d[5] * d[31] + std::pow(d[3], 2) * d[32] + std::pow(d[4], 2) * d[32] - std::pow(d[8], 2) * d[32] - 2 * d[5] * d[8] * d[35];
				coeffs[242] = d[3] * d[11] * d[27] + d[2] * d[12] * d[27] + d[4] * d[11] * d[28] + d[2] * d[13] * d[28] + d[3] * d[9] * d[29] + d[4] * d[10] * d[29] + d[0] * d[12] * d[29] + d[1] * d[13] * d[29] + d[2] * d[9] * d[30] + d[0] * d[11] * d[30] + 2 * d[5] * d[12] * d[30] + 2 * d[3] * d[14] * d[30] + d[2] * d[10] * d[31] + d[1] * d[11] * d[31] + 2 * d[5] * d[13] * d[31] + 2 * d[4] * d[14] * d[31] + 2 * d[3] * d[12] * d[32] + 2 * d[4] * d[13] * d[32] - 2 * d[8] * d[17] * d[32] - 2 * d[8] * d[14] * d[35] - 2 * d[5] * d[17] * d[35];
				coeffs[243] = d[11] * d[12] * d[27] + d[11] * d[13] * d[28] + d[9] * d[12] * d[29] + d[10] * d[13] * d[29] + d[9] * d[11] * d[30] + 2 * d[12] * d[14] * d[30] + d[10] * d[11] * d[31] + 2 * d[13] * d[14] * d[31] + std::pow(d[12], 2) * d[32] + std::pow(d[13], 2) * d[32] - std::pow(d[17], 2) * d[32] - 2 * d[14] * d[17] * d[35];
				coeffs[244] = d[3] * d[20] * d[27] + d[2] * d[21] * d[27] + d[4] * d[20] * d[28] + d[2] * d[22] * d[28] + d[3] * d[18] * d[29] + d[4] * d[19] * d[29] + d[0] * d[21] * d[29] + d[1] * d[22] * d[29] + d[2] * d[18] * d[30] + d[0] * d[20] * d[30] + 2 * d[5] * d[21] * d[30] + 2 * d[3] * d[23] * d[30] + d[2] * d[19] * d[31] + d[1] * d[20] * d[31] + 2 * d[5] * d[22] * d[31] + 2 * d[4] * d[23] * d[31] + 2 * d[3] * d[21] * d[32] + 2 * d[4] * d[22] * d[32] - 2 * d[8] * d[26] * d[32] - 2 * d[8] * d[23] * d[35] - 2 * d[5] * d[26] * d[35];
				coeffs[245] = d[12] * d[20] * d[27] + d[11] * d[21] * d[27] + d[13] * d[20] * d[28] + d[11] * d[22] * d[28] + d[12] * d[18] * d[29] + d[13] * d[19] * d[29] + d[9] * d[21] * d[29] + d[10] * d[22] * d[29] + d[11] * d[18] * d[30] + d[9] * d[20] * d[30] + 2 * d[14] * d[21] * d[30] + 2 * d[12] * d[23] * d[30] + d[11] * d[19] * d[31] + d[10] * d[20] * d[31] + 2 * d[14] * d[22] * d[31] + 2 * d[13] * d[23] * d[31] + 2 * d[12] * d[21] * d[32] + 2 * d[13] * d[22] * d[32] - 2 * d[17] * d[26] * d[32] - 2 * d[17] * d[23] * d[35] - 2 * d[14] * d[26] * d[35];
				coeffs[246] = d[20] * d[21] * d[27] + d[20] * d[22] * d[28] + d[18] * d[21] * d[29] + d[19] * d[22] * d[29] + d[18] * d[20] * d[30] + 2 * d[21] * d[23] * d[30] + d[19] * d[20] * d[31] + 2 * d[22] * d[23] * d[31] + std::pow(d[21], 2) * d[32] + std::pow(d[22], 2) * d[32] - std::pow(d[26], 2) * d[32] - 2 * d[23] * d[26] * d[35];
				coeffs[247] = d[3] * d[27] * d[29] + d[4] * d[28] * d[29] + d[2] * d[27] * d[30] + d[0] * d[29] * d[30] + d[5] * std::pow(d[30], 2) + d[2] * d[28] * d[31] + d[1] * d[29] * d[31] + d[5] * std::pow(d[31], 2) + 2 * d[3] * d[30] * d[32] + 2 * d[4] * d[31] * d[32] - 2 * d[8] * d[32] * d[35] - d[5] * std::pow(d[35], 2);
				coeffs[248] = d[12] * d[27] * d[29] + d[13] * d[28] * d[29] + d[11] * d[27] * d[30] + d[9] * d[29] * d[30] + d[14] * std::pow(d[30], 2) + d[11] * d[28] * d[31] + d[10] * d[29] * d[31] + d[14] * std::pow(d[31], 2) + 2 * d[12] * d[30] * d[32] + 2 * d[13] * d[31] * d[32] - 2 * d[17] * d[32] * d[35] - d[14] * std::pow(d[35], 2);
				coeffs[249] = d[21] * d[27] * d[29] + d[22] * d[28] * d[29] + d[20] * d[27] * d[30] + d[18] * d[29] * d[30] + d[23] * std::pow(d[30], 2) + d[20] * d[28] * d[31] + d[19] * d[29] * d[31] + d[23] * std::pow(d[31], 2) + 2 * d[21] * d[30] * d[32] + 2 * d[22] * d[31] * d[32] - 2 * d[26] * d[32] * d[35] - d[23] * std::pow(d[35], 2);
				coeffs[250] = d[27] * d[29] * d[30] + d[28] * d[29] * d[31] + std::pow(d[30], 2) * d[32] + std::pow(d[31], 2) * d[32] - d[32] * std::pow(d[35], 2);
				coeffs[251] = d[2] * d[3] * d[36] + d[2] * d[4] * d[37] + d[0] * d[3] * d[38] + d[1] * d[4] * d[38] + d[0] * d[2] * d[39] + 2 * d[3] * d[5] * d[39] + d[1] * d[2] * d[40] + 2 * d[4] * d[5] * d[40] + std::pow(d[3], 2) * d[41] + std::pow(d[4], 2) * d[41] - std::pow(d[8], 2) * d[41] - 2 * d[5] * d[8] * d[44];
				coeffs[252] = d[3] * d[11] * d[36] + d[2] * d[12] * d[36] + d[4] * d[11] * d[37] + d[2] * d[13] * d[37] + d[3] * d[9] * d[38] + d[4] * d[10] * d[38] + d[0] * d[12] * d[38] + d[1] * d[13] * d[38] + d[2] * d[9] * d[39] + d[0] * d[11] * d[39] + 2 * d[5] * d[12] * d[39] + 2 * d[3] * d[14] * d[39] + d[2] * d[10] * d[40] + d[1] * d[11] * d[40] + 2 * d[5] * d[13] * d[40] + 2 * d[4] * d[14] * d[40] + 2 * d[3] * d[12] * d[41] + 2 * d[4] * d[13] * d[41] - 2 * d[8] * d[17] * d[41] - 2 * d[8] * d[14] * d[44] - 2 * d[5] * d[17] * d[44];
				coeffs[253] = d[11] * d[12] * d[36] + d[11] * d[13] * d[37] + d[9] * d[12] * d[38] + d[10] * d[13] * d[38] + d[9] * d[11] * d[39] + 2 * d[12] * d[14] * d[39] + d[10] * d[11] * d[40] + 2 * d[13] * d[14] * d[40] + std::pow(d[12], 2) * d[41] + std::pow(d[13], 2) * d[41] - std::pow(d[17], 2) * d[41] - 2 * d[14] * d[17] * d[44];
				coeffs[254] = d[3] * d[20] * d[36] + d[2] * d[21] * d[36] + d[4] * d[20] * d[37] + d[2] * d[22] * d[37] + d[3] * d[18] * d[38] + d[4] * d[19] * d[38] + d[0] * d[21] * d[38] + d[1] * d[22] * d[38] + d[2] * d[18] * d[39] + d[0] * d[20] * d[39] + 2 * d[5] * d[21] * d[39] + 2 * d[3] * d[23] * d[39] + d[2] * d[19] * d[40] + d[1] * d[20] * d[40] + 2 * d[5] * d[22] * d[40] + 2 * d[4] * d[23] * d[40] + 2 * d[3] * d[21] * d[41] + 2 * d[4] * d[22] * d[41] - 2 * d[8] * d[26] * d[41] - 2 * d[8] * d[23] * d[44] - 2 * d[5] * d[26] * d[44];
				coeffs[255] = d[12] * d[20] * d[36] + d[11] * d[21] * d[36] + d[13] * d[20] * d[37] + d[11] * d[22] * d[37] + d[12] * d[18] * d[38] + d[13] * d[19] * d[38] + d[9] * d[21] * d[38] + d[10] * d[22] * d[38] + d[11] * d[18] * d[39] + d[9] * d[20] * d[39] + 2 * d[14] * d[21] * d[39] + 2 * d[12] * d[23] * d[39] + d[11] * d[19] * d[40] + d[10] * d[20] * d[40] + 2 * d[14] * d[22] * d[40] + 2 * d[13] * d[23] * d[40] + 2 * d[12] * d[21] * d[41] + 2 * d[13] * d[22] * d[41] - 2 * d[17] * d[26] * d[41] - 2 * d[17] * d[23] * d[44] - 2 * d[14] * d[26] * d[44];
				coeffs[256] = d[20] * d[21] * d[36] + d[20] * d[22] * d[37] + d[18] * d[21] * d[38] + d[19] * d[22] * d[38] + d[18] * d[20] * d[39] + 2 * d[21] * d[23] * d[39] + d[19] * d[20] * d[40] + 2 * d[22] * d[23] * d[40] + std::pow(d[21], 2) * d[41] + std::pow(d[22], 2) * d[41] - std::pow(d[26], 2) * d[41] - 2 * d[23] * d[26] * d[44];
				coeffs[257] = d[3] * d[29] * d[36] + d[2] * d[30] * d[36] + d[4] * d[29] * d[37] + d[2] * d[31] * d[37] + d[3] * d[27] * d[38] + d[4] * d[28] * d[38] + d[0] * d[30] * d[38] + d[1] * d[31] * d[38] + d[2] * d[27] * d[39] + d[0] * d[29] * d[39] + 2 * d[5] * d[30] * d[39] + 2 * d[3] * d[32] * d[39] + d[2] * d[28] * d[40] + d[1] * d[29] * d[40] + 2 * d[5] * d[31] * d[40] + 2 * d[4] * d[32] * d[40] + 2 * d[3] * d[30] * d[41] + 2 * d[4] * d[31] * d[41] - 2 * d[8] * d[35] * d[41] - 2 * d[8] * d[32] * d[44] - 2 * d[5] * d[35] * d[44];
				coeffs[258] = d[12] * d[29] * d[36] + d[11] * d[30] * d[36] + d[13] * d[29] * d[37] + d[11] * d[31] * d[37] + d[12] * d[27] * d[38] + d[13] * d[28] * d[38] + d[9] * d[30] * d[38] + d[10] * d[31] * d[38] + d[11] * d[27] * d[39] + d[9] * d[29] * d[39] + 2 * d[14] * d[30] * d[39] + 2 * d[12] * d[32] * d[39] + d[11] * d[28] * d[40] + d[10] * d[29] * d[40] + 2 * d[14] * d[31] * d[40] + 2 * d[13] * d[32] * d[40] + 2 * d[12] * d[30] * d[41] + 2 * d[13] * d[31] * d[41] - 2 * d[17] * d[35] * d[41] - 2 * d[17] * d[32] * d[44] - 2 * d[14] * d[35] * d[44];
				coeffs[259] = d[21] * d[29] * d[36] + d[20] * d[30] * d[36] + d[22] * d[29] * d[37] + d[20] * d[31] * d[37] + d[21] * d[27] * d[38] + d[22] * d[28] * d[38] + d[18] * d[30] * d[38] + d[19] * d[31] * d[38] + d[20] * d[27] * d[39] + d[18] * d[29] * d[39] + 2 * d[23] * d[30] * d[39] + 2 * d[21] * d[32] * d[39] + d[20] * d[28] * d[40] + d[19] * d[29] * d[40] + 2 * d[23] * d[31] * d[40] + 2 * d[22] * d[32] * d[40] + 2 * d[21] * d[30] * d[41] + 2 * d[22] * d[31] * d[41] - 2 * d[26] * d[35] * d[41] - 2 * d[26] * d[32] * d[44] - 2 * d[23] * d[35] * d[44];
				coeffs[260] = d[29] * d[30] * d[36] + d[29] * d[31] * d[37] + d[27] * d[30] * d[38] + d[28] * d[31] * d[38] + d[27] * d[29] * d[39] + 2 * d[30] * d[32] * d[39] + d[28] * d[29] * d[40] + 2 * d[31] * d[32] * d[40] + std::pow(d[30], 2) * d[41] + std::pow(d[31], 2) * d[41] - std::pow(d[35], 2) * d[41] - 2 * d[32] * d[35] * d[44];
				coeffs[261] = d[3] * d[36] * d[38] + d[4] * d[37] * d[38] + d[2] * d[36] * d[39] + d[0] * d[38] * d[39] + d[5] * std::pow(d[39], 2) + d[2] * d[37] * d[40] + d[1] * d[38] * d[40] + d[5] * std::pow(d[40], 2) + 2 * d[3] * d[39] * d[41] + 2 * d[4] * d[40] * d[41] - 2 * d[8] * d[41] * d[44] - d[5] * std::pow(d[44], 2);
				coeffs[262] = d[12] * d[36] * d[38] + d[13] * d[37] * d[38] + d[11] * d[36] * d[39] + d[9] * d[38] * d[39] + d[14] * std::pow(d[39], 2) + d[11] * d[37] * d[40] + d[10] * d[38] * d[40] + d[14] * std::pow(d[40], 2) + 2 * d[12] * d[39] * d[41] + 2 * d[13] * d[40] * d[41] - 2 * d[17] * d[41] * d[44] - d[14] * std::pow(d[44], 2);
				coeffs[263] = d[21] * d[36] * d[38] + d[22] * d[37] * d[38] + d[20] * d[36] * d[39] + d[18] * d[38] * d[39] + d[23] * std::pow(d[39], 2) + d[20] * d[37] * d[40] + d[19] * d[38] * d[40] + d[23] * std::pow(d[40], 2) + 2 * d[21] * d[39] * d[41] + 2 * d[22] * d[40] * d[41] - 2 * d[26] * d[41] * d[44] - d[23] * std::pow(d[44], 2);
				coeffs[264] = d[30] * d[36] * d[38] + d[31] * d[37] * d[38] + d[29] * d[36] * d[39] + d[27] * d[38] * d[39] + d[32] * std::pow(d[39], 2) + d[29] * d[37] * d[40] + d[28] * d[38] * d[40] + d[32] * std::pow(d[40], 2) + 2 * d[30] * d[39] * d[41] + 2 * d[31] * d[40] * d[41] - 2 * d[35] * d[41] * d[44] - d[32] * std::pow(d[44], 2);
				coeffs[265] = d[36] * d[38] * d[39] + d[37] * d[38] * d[40] + std::pow(d[39], 2) * d[41] + std::pow(d[40], 2) * d[41] - d[41] * std::pow(d[44], 2);

				static const int coeffs_ind[] = {116, 156, 191, 231, 117, 0, 20, 40, 60, 80, 157, 192, 232, 118, 1, 21, 41, 61, 81, 158, 193, 233, 119, 2, 22, 42, 62, 82, 159, 194, 234, 120, 0, 20, 40, 60, 80, 100, 160, 195, 235, 121, 3, 23, 43, 1, 21, 41, 61, 63,
												 81, 83, 101, 161, 196, 236, 122, 4, 24, 44, 2, 22, 42, 62, 64, 82, 84, 102, 162, 197, 237, 123, 3, 23, 43, 63, 83, 103, 163, 198, 238, 124, 5, 25, 45, 4, 24, 44, 64, 65, 84, 85, 104, 164, 199, 239, 125, 5, 25, 45,
												 65, 85, 105, 165, 200, 240, 126, 20, 0, 40, 60, 80, 100, 166, 201, 241, 127, 6, 26, 46, 66, 21, 1, 41, 61, 81, 86, 101, 167, 202, 242, 128, 7, 27, 47, 67, 22, 2, 42, 62, 82, 87, 102, 168, 203, 243, 129, 6, 26, 46,
												 66, 86, 23, 3, 43, 63, 83, 103, 106, 169, 204, 244, 130, 8, 28, 48, 7, 27, 47, 67, 68, 87, 24, 4, 44, 64, 84, 88, 104, 107, 170, 205, 245, 131, 8, 28, 48, 68, 88, 25, 5, 45, 65, 85, 105, 108, 171, 206, 246, 132,
												 26, 6, 46, 66, 86, 106, 172, 207, 247, 133, 9, 29, 49, 69, 27, 7, 47, 67, 87, 89, 107, 173, 208, 248, 134, 9, 29, 49, 69, 89, 28, 8, 48, 68, 88, 108, 109, 174, 209, 249, 135, 29, 9, 49, 69, 89, 109, 175, 210, 250,
												 20, 40, 0, 60, 80, 100, 116, 156, 191, 231, 21, 20, 40, 41, 1, 60, 61, 80, 81, 100, 101, 117, 157, 192, 0, 232, 22, 21, 41, 42, 2, 61, 62, 81, 82, 101, 102, 118, 158, 193, 1, 233, 22, 42, 62, 82, 102, 119, 159, 194,
												 2, 234, 23, 43, 20, 40, 3, 60, 0, 63, 80, 83, 100, 103, 120, 160, 195, 235, 24, 23, 43, 44, 21, 41, 4, 61, 1, 63, 64, 81, 83, 84, 101, 103, 104, 121, 161, 196, 3, 236, 24, 44, 22, 42, 62, 2, 64, 82, 84, 102,
												 104, 122, 162, 197, 4, 237, 25, 45, 23, 43, 5, 63, 3, 65, 83, 85, 103, 105, 123, 163, 198, 238, 25, 45, 24, 44, 64, 4, 65, 84, 85, 104, 105, 124, 164, 199, 5, 239, 25, 45, 65, 5, 85, 105, 125, 165, 200, 240, 136, 176,
												 211, 26, 46, 6, 40, 60, 0, 66, 80, 86, 100, 106, 126, 166, 20, 201, 241, 251, 137, 10, 30, 50, 70, 90, 177, 212, 27, 26, 46, 47, 7, 66, 41, 61, 1, 67, 81, 86, 87, 101, 106, 107, 127, 167, 21, 202, 6, 242, 252, 138,
												 11, 31, 51, 71, 91, 178, 213, 27, 47, 67, 42, 62, 2, 82, 87, 102, 107, 128, 168, 22, 203, 7, 243, 253, 139, 10, 30, 50, 70, 90, 110, 179, 214, 28, 48, 26, 46, 8, 66, 6, 43, 63, 3, 68, 83, 86, 88, 103, 106, 108,
												 129, 169, 23, 204, 244, 254, 140, 12, 32, 52, 11, 31, 51, 71, 72, 91, 92, 111, 180, 215, 28, 48, 27, 47, 67, 7, 68, 44, 64, 4, 84, 87, 88, 104, 107, 108, 130, 170, 24, 205, 8, 245, 255, 141, 12, 32, 52, 72, 92, 112,
												 181, 216, 28, 48, 68, 8, 45, 65, 5, 85, 88, 105, 108, 131, 171, 25, 206, 246, 256, 142, 30, 10, 50, 70, 90, 110, 182, 217, 29, 49, 9, 46, 66, 6, 69, 86, 89, 106, 109, 132, 172, 26, 207, 247, 257, 143, 13, 33, 53, 73,
												 31, 11, 51, 71, 91, 93, 111, 183, 218, 29, 49, 69, 47, 67, 7, 87, 89, 107, 109, 133, 173, 27, 208, 9, 248, 258, 144, 13, 33, 53, 73, 93, 32, 12, 52, 72, 92, 112, 113, 184, 219, 29, 49, 69, 9, 48, 68, 8, 88, 89,
												 108, 109, 134, 174, 28, 209, 249, 259, 145, 33, 13, 53, 73, 93, 113, 185, 220, 49, 69, 9, 89, 109, 135, 175, 29, 210, 250, 260, 30, 50, 10, 70, 90, 60, 40, 80, 0, 100, 20, 110, 136, 176, 211, 251, 31, 30, 50, 51, 11, 70,
												 71, 90, 91, 61, 41, 81, 1, 101, 21, 110, 111, 137, 177, 212, 10, 252, 31, 51, 71, 91, 62, 42, 82, 2, 102, 22, 111, 138, 178, 213, 11, 253, 32, 52, 30, 50, 12, 70, 10, 72, 90, 92, 110, 63, 43, 83, 3, 103, 23, 112,
												 139, 179, 214, 254, 32, 52, 31, 51, 71, 11, 72, 91, 92, 111, 64, 44, 84, 4, 104, 24, 112, 140, 180, 215, 12, 255, 32, 52, 72, 12, 92, 112, 65, 45, 85, 5, 105, 25, 141, 181, 216, 256, 146, 186, 221, 33, 53, 13, 50, 70,
												 10, 73, 90, 93, 110, 66, 46, 86, 6, 106, 26, 113, 142, 182, 30, 217, 257, 261, 147, 14, 34, 54, 74, 94, 187, 222, 33, 53, 73, 51, 71, 11, 91, 93, 111, 67, 47, 87, 7, 107, 27, 113, 143, 183, 31, 218, 13, 258, 262, 148,
												 14, 34, 54, 74, 94, 114, 188, 223, 33, 53, 73, 13, 52, 72, 12, 92, 93, 112, 113, 68, 48, 88, 8, 108, 28, 144, 184, 32, 219, 259, 263, 149, 34, 14, 54, 74, 94, 114, 189, 224, 53, 73, 13, 93, 113, 69, 49, 89, 9, 109,
												 29, 145, 185, 33, 220, 260, 264, 34, 54, 14, 74, 94, 70, 50, 90, 10, 110, 30, 114, 146, 186, 221, 261, 34, 54, 74, 94, 71, 51, 91, 11, 111, 31, 114, 147, 187, 222, 14, 262, 34, 54, 74, 14, 94, 114, 72, 52, 92, 12, 112,
												 32, 148, 188, 223, 263, 150, 190, 225, 54, 74, 14, 94, 114, 73, 53, 93, 13, 113, 33, 149, 189, 34, 224, 264, 265, 60, 0, 80, 40, 100, 20, 116, 156, 191, 231, 61, 1, 0, 80, 81, 40, 41, 100, 101, 21, 117, 157, 192, 60, 232,
												 20, 62, 2, 1, 81, 82, 41, 42, 101, 102, 22, 118, 158, 193, 61, 233, 21, 2, 82, 42, 102, 119, 159, 194, 62, 234, 22, 63, 3, 40, 80, 0, 83, 43, 100, 103, 23, 120, 60, 160, 20, 195, 235, 64, 4, 3, 83, 41, 81, 1,
												 84, 43, 44, 101, 103, 104, 24, 121, 61, 161, 21, 196, 63, 236, 23, 4, 84, 42, 82, 2, 44, 102, 104, 122, 62, 162, 22, 197, 64, 237, 24, 65, 5, 43, 83, 3, 85, 45, 103, 105, 25, 123, 63, 163, 23, 198, 238, 5, 85, 44,
												 84, 4, 45, 104, 105, 124, 64, 164, 24, 199, 65, 239, 25, 45, 85, 5, 105, 125, 65, 165, 25, 200, 240, 66, 6, 86, 46, 80, 100, 60, 0, 20, 40, 106, 26, 126, 166, 201, 241, 15, 35, 55, 75, 95, 67, 7, 6, 86, 87, 46,
												 47, 81, 101, 61, 1, 21, 106, 41, 107, 27, 127, 167, 202, 66, 242, 26, 16, 36, 56, 76, 96, 7, 87, 47, 82, 102, 62, 2, 22, 107, 42, 128, 168, 203, 67, 243, 27, 15, 35, 55, 75, 95, 68, 8, 46, 86, 6, 88, 48, 83,
												 103, 63, 106, 3, 23, 43, 108, 28, 129, 66, 169, 26, 204, 244, 17, 37, 57, 16, 36, 56, 76, 77, 96, 97, 8, 88, 47, 87, 7, 48, 84, 104, 64, 107, 4, 24, 108, 44, 130, 67, 170, 27, 205, 68, 245, 28, 17, 37, 57, 77,
												 97, 48, 88, 8, 85, 105, 65, 108, 5, 25, 45, 131, 68, 171, 28, 206, 246, 35, 15, 55, 75, 95, 69, 9, 89, 49, 86, 106, 66, 6, 26, 46, 109, 29, 132, 172, 207, 247, 18, 38, 58, 78, 36, 16, 56, 76, 96, 98, 9, 89,
												 49, 87, 107, 67, 7, 27, 109, 47, 133, 173, 208, 69, 248, 29, 18, 38, 58, 78, 98, 37, 17, 57, 77, 97, 49, 89, 9, 88, 108, 68, 109, 8, 28, 48, 134, 69, 174, 29, 209, 249, 38, 18, 58, 78, 98, 89, 109, 69, 9, 29,
												 49, 135, 175, 210, 250, 35, 55, 15, 75, 95, 70, 10, 90, 50, 110, 30, 0, 20, 100, 60, 80, 136, 176, 211, 40, 251, 36, 35, 55, 56, 16, 75, 76, 95, 96, 15, 71, 11, 10, 90, 91, 50, 51, 110, 111, 31, 1, 21, 101, 61,
												 81, 137, 177, 212, 70, 41, 252, 30, 36, 56, 76, 96, 16, 11, 91, 51, 111, 2, 22, 102, 62, 82, 138, 178, 213, 71, 42, 253, 31, 37, 57, 35, 55, 17, 75, 15, 77, 95, 97, 72, 12, 50, 90, 10, 92, 52, 110, 112, 32, 3,
												 23, 103, 63, 83, 139, 70, 179, 30, 214, 43, 254, 37, 57, 36, 56, 76, 16, 77, 96, 97, 17, 12, 92, 51, 91, 11, 52, 111, 112, 4, 24, 104, 64, 84, 140, 71, 180, 31, 215, 72, 44, 255, 32, 37, 57, 77, 17, 97, 52, 92,
												 12, 112, 5, 25, 105, 65, 85, 141, 72, 181, 32, 216, 45, 256, 75, 15, 95, 55, 35, 60, 20, 80, 100, 0, 40, 76, 16, 15, 95, 96, 55, 56, 36, 61, 21, 81, 101, 1, 41, 75, 35, 16, 96, 56, 62, 22, 82, 102, 2, 42,
												 76, 36, 77, 17, 55, 95, 15, 97, 57, 37, 63, 23, 83, 103, 75, 3, 35, 43, 17, 97, 56, 96, 16, 57, 64, 24, 84, 104, 76, 4, 36, 44, 77, 37, 57, 97, 17, 65, 25, 85, 105, 77, 5, 37, 45, 38, 58, 18, 55, 75,
												 15, 78, 95, 98, 35, 73, 13, 93, 53, 90, 110, 70, 10, 30, 50, 113, 33, 6, 26, 106, 66, 86, 142, 182, 217, 46, 257, 39, 59, 19, 79, 99, 75, 55, 95, 15, 35, 74, 14, 94, 54, 114, 34, 10, 30, 110, 70, 90, 146, 186,
												 221, 50, 261, 19, 39, 59, 79, 99, 38, 58, 78, 56, 76, 16, 96, 98, 36, 18, 13, 93, 53, 91, 111, 71, 11, 31, 113, 51, 7, 27, 107, 67, 87, 143, 183, 218, 73, 47, 258, 33, 39, 59, 79, 99, 76, 56, 96, 16, 36, 19,
												 14, 94, 54, 114, 11, 31, 111, 71, 91, 147, 187, 222, 74, 51, 262, 34, 19, 39, 59, 79, 99, 38, 58, 78, 18, 57, 77, 17, 97, 98, 37, 53, 93, 13, 92, 112, 72, 113, 12, 32, 52, 8, 28, 108, 68, 88, 144, 73, 184, 33,
												 219, 48, 259, 39, 59, 79, 19, 99, 77, 57, 97, 17, 37, 54, 94, 14, 114, 12, 32, 112, 72, 92, 148, 74, 188, 34, 223, 52, 263, 39, 19, 59, 79, 99, 58, 78, 18, 98, 38, 93, 113, 73, 13, 33, 53, 9, 29, 109, 69, 89,
												 145, 185, 220, 49, 260, 59, 79, 19, 99, 78, 58, 98, 18, 38, 39, 94, 114, 74, 14, 34, 54, 13, 33, 113, 73, 93, 149, 189, 224, 53, 264, 74, 54, 94, 14, 114, 34, 150, 190, 225, 265, 115, 115, 151, 75, 35, 95, 15, 55, 226,
												 151, 226, 78, 18, 98, 58, 95, 75, 15, 35, 55, 38, 66, 26, 86, 106, 6, 46, 115, 151, 226, 79, 19, 99, 59, 39, 15, 35, 75, 95, 70, 30, 90, 110, 10, 50, 55, 115, 152, 76, 36, 96, 16, 56, 227, 152, 227, 18, 98, 58,
												 96, 76, 16, 36, 56, 67, 27, 87, 107, 7, 47, 78, 38, 115, 152, 227, 19, 99, 59, 16, 36, 76, 96, 71, 31, 91, 111, 11, 51, 79, 56, 39, 115, 153, 77, 37, 97, 17, 57, 228, 153, 115, 228, 58, 98, 18, 97, 77, 17, 37,
												 57, 68, 28, 88, 108, 78, 8, 38, 48, 115, 153, 228, 59, 99, 19, 17, 37, 77, 97, 72, 32, 92, 112, 79, 12, 39, 52, 57, 115, 154, 78, 38, 98, 18, 58, 229, 154, 115, 229, 98, 78, 18, 38, 58, 69, 29, 89, 109, 9, 49,
												 155, 230, 115, 154, 229, 99, 79, 19, 39, 59, 18, 38, 78, 98, 73, 33, 93, 113, 13, 53, 58, 115, 155, 79, 39, 99, 19, 59, 230, 115, 155, 230, 19, 39, 79, 99, 74, 34, 94, 114, 14, 54, 59, 79, 59, 99, 19, 39, 14, 34,
												 114, 74, 94, 150, 190, 225, 54, 265};

				static const int C_ind[] = {0, 18, 19, 94, 95, 96, 97, 98, 103, 110, 113, 114, 189, 190, 191, 192, 193, 198, 205, 208, 209, 284, 285, 286, 287, 288, 293, 300, 303, 304, 379, 380, 384, 385, 386, 387, 389, 397, 398, 399, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483,
											484, 490, 492, 493, 494, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 585, 587, 588, 589, 664, 665, 669, 670, 671, 672, 674, 682, 683, 684, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 775, 777, 778, 779, 854, 855, 859, 860, 861,
											862, 864, 872, 873, 874, 949, 950, 960, 961, 962, 963, 964, 966, 968, 969, 1044, 1045, 1046, 1047, 1048, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1139, 1140, 1141, 1142, 1143, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1158, 1159, 1234, 1235, 1239, 1240, 1241,
											1242, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1424, 1425, 1429, 1430, 1431, 1432, 1434, 1435, 1436, 1437, 1438, 1439, 1441, 1442, 1443, 1444, 1519, 1520,
											1530, 1531, 1532, 1533, 1534, 1536, 1538, 1539, 1614, 1615, 1616, 1617, 1618, 1623, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1633, 1634, 1709, 1710, 1714, 1715, 1716, 1717, 1719, 1720, 1721, 1722, 1723, 1724, 1726, 1727, 1728, 1729, 1804, 1805, 1815, 1816, 1817, 1818, 1819, 1821, 1823, 1824, 1899,
											1920, 1923, 1926, 1933, 1937, 1947, 1948, 1949, 1951, 1953, 2015, 2016, 2017, 2018, 2021, 2024, 2028, 2031, 2032, 2041, 2042, 2043, 2044, 2046, 2047, 2048, 2110, 2111, 2112, 2113, 2116, 2119, 2123, 2126, 2127, 2136, 2137, 2138, 2139, 2141, 2142, 2143, 2206, 2207, 2214, 2221, 2231, 2233, 2234, 2236,
											2237, 2238, 2300, 2303, 2304, 2305, 2306, 2307, 2308, 2313, 2315, 2317, 2319, 2327, 2328, 2329, 2331, 2333, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2408, 2410, 2411, 2412, 2414, 2421, 2422, 2423, 2424, 2426, 2427, 2428, 2491, 2492, 2494, 2495, 2497, 2498, 2499, 2505, 2506, 2509,
											2516, 2518, 2519, 2521, 2522, 2523, 2585, 2588, 2589, 2590, 2591, 2592, 2593, 2598, 2600, 2602, 2604, 2612, 2613, 2614, 2616, 2618, 2681, 2682, 2684, 2685, 2687, 2688, 2689, 2695, 2696, 2699, 2706, 2708, 2709, 2711, 2712, 2713, 2779, 2780, 2782, 2783, 2790, 2794, 2803, 2804, 2806, 2808, 2850, 2868,
											2869, 2870, 2873, 2876, 2880, 2881, 2882, 2883, 2884, 2887, 2888, 2897, 2898, 2899, 2900, 2901, 2903, 2944, 2945, 2946, 2947, 2948, 2953, 2960, 2963, 2964, 2965, 2966, 2967, 2968, 2971, 2974, 2975, 2976, 2977, 2978, 2979, 2981, 2982, 2983, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2998, 3039, 3040,
											3041, 3042, 3043, 3048, 3055, 3058, 3059, 3061, 3062, 3069, 3070, 3071, 3072, 3074, 3076, 3078, 3086, 3088, 3089, 3090, 3091, 3092, 3093, 3134, 3135, 3139, 3140, 3141, 3142, 3144, 3152, 3153, 3154, 3155, 3158, 3159, 3160, 3161, 3162, 3163, 3165, 3166, 3167, 3168, 3169, 3170, 3172, 3173, 3174, 3182,
											3183, 3184, 3185, 3186, 3188, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3245, 3247, 3248, 3249, 3251, 3252, 3254, 3255, 3257, 3258, 3259, 3260, 3261, 3262, 3264, 3265, 3266, 3268, 3269, 3276, 3278, 3279, 3280, 3281, 3282, 3283, 3324, 3325, 3329, 3330, 3331, 3332, 3334, 3342,
											3343, 3344, 3349, 3350, 3352, 3353, 3355, 3356, 3357, 3359, 3360, 3363, 3364, 3373, 3374, 3375, 3376, 3378, 3419, 3420, 3430, 3431, 3432, 3433, 3434, 3436, 3438, 3439, 3440, 3443, 3446, 3450, 3451, 3452, 3453, 3454, 3457, 3458, 3467, 3468, 3469, 3470, 3471, 3473, 3514, 3515, 3516, 3517, 3518, 3523,
											3525, 3526, 3527, 3528, 3529, 3530, 3531, 3533, 3534, 3536, 3537, 3544, 3545, 3546, 3547, 3549, 3551, 3553, 3561, 3563, 3564, 3565, 3566, 3567, 3568, 3609, 3610, 3614, 3615, 3616, 3617, 3619, 3620, 3621, 3622, 3623, 3624, 3626, 3627, 3628, 3629, 3634, 3635, 3637, 3638, 3640, 3641, 3642, 3644, 3645,
											3648, 3649, 3658, 3659, 3660, 3661, 3663, 3704, 3705, 3715, 3716, 3717, 3718, 3719, 3721, 3723, 3724, 3735, 3736, 3737, 3739, 3743, 3753, 3754, 3755, 3756, 3758, 3799, 3820, 3823, 3826, 3833, 3837, 3840, 3841, 3842, 3843, 3844, 3845, 3847, 3848, 3849, 3851, 3853, 3915, 3916, 3917, 3918, 3921, 3924,
											3928, 3931, 3932, 3935, 3936, 3937, 3938, 3939, 3940, 3941, 3942, 3943, 3944, 3946, 3947, 3948, 4011, 4012, 4019, 4026, 4030, 4031, 4032, 4033, 4034, 4035, 4036, 4038, 4039, 4041, 4042, 4043, 4105, 4108, 4109, 4110, 4111, 4112, 4113, 4118, 4120, 4122, 4124, 4125, 4126, 4127, 4128, 4129, 4130, 4132,
											4133, 4134, 4136, 4138, 4201, 4202, 4204, 4205, 4207, 4208, 4209, 4215, 4216, 4219, 4220, 4221, 4222, 4223, 4224, 4225, 4226, 4228, 4229, 4231, 4232, 4233, 4299, 4300, 4302, 4303, 4310, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4323, 4324, 4326, 4328, 4370, 4388, 4389, 4390, 4393, 4396, 4400, 4401,
											4402, 4403, 4404, 4407, 4408, 4410, 4411, 4412, 4413, 4414, 4415, 4417, 4418, 4419, 4420, 4421, 4423, 4464, 4465, 4466, 4467, 4468, 4473, 4480, 4483, 4484, 4486, 4487, 4494, 4495, 4496, 4497, 4499, 4501, 4503, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4513, 4514, 4515, 4516, 4517, 4518, 4559, 4560,
											4564, 4565, 4566, 4567, 4569, 4577, 4578, 4579, 4584, 4585, 4587, 4588, 4590, 4591, 4592, 4594, 4595, 4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4608, 4609, 4610, 4611, 4613, 4654, 4655, 4665, 4666, 4667, 4668, 4669, 4671, 4673, 4674, 4685, 4686, 4687, 4689, 4693, 4695, 4696, 4697, 4698, 4699,
											4700, 4703, 4704, 4705, 4706, 4708, 4749, 4770, 4773, 4776, 4783, 4787, 4790, 4791, 4792, 4793, 4794, 4795, 4797, 4798, 4799, 4801, 4803, 4866, 4867, 4874, 4881, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4893, 4894, 4896, 4897, 4898, 4964, 4965, 4967, 4968, 4975, 4979, 4980, 4981, 4982, 4983, 4984,
											4985, 4988, 4989, 4991, 4993, 5035, 5053, 5054, 5065, 5066, 5067, 5069, 5073, 5075, 5076, 5077, 5078, 5079, 5080, 5083, 5084, 5085, 5086, 5088, 5129, 5184, 5185, 5191, 5193, 5202, 5203, 5209, 5216, 5219, 5222, 5279, 5280, 5281, 5282, 5286, 5287, 5288, 5295, 5297, 5298, 5304, 5311, 5314, 5315, 5317,
											5318, 5374, 5375, 5376, 5377, 5381, 5382, 5383, 5390, 5392, 5393, 5399, 5406, 5409, 5410, 5412, 5413, 5471, 5472, 5477, 5485, 5494, 5501, 5504, 5505, 5507, 5508, 5564, 5565, 5568, 5569, 5570, 5571, 5573, 5577, 5582, 5583, 5589, 5594, 5596, 5597, 5599, 5602, 5659, 5660, 5661, 5662, 5663, 5664, 5665,
											5666, 5667, 5668, 5672, 5675, 5677, 5678, 5684, 5689, 5691, 5692, 5694, 5695, 5697, 5698, 5756, 5757, 5758, 5759, 5760, 5762, 5767, 5770, 5779, 5784, 5786, 5787, 5789, 5790, 5792, 5793, 5849, 5850, 5853, 5854, 5855, 5856, 5858, 5862, 5867, 5868, 5874, 5879, 5881, 5882, 5884, 5887, 5946, 5947, 5948,
											5949, 5950, 5952, 5957, 5960, 5969, 5974, 5976, 5977, 5979, 5980, 5982, 5983, 6043, 6044, 6045, 6052, 6064, 6069, 6071, 6072, 6074, 6077, 6134, 6135, 6141, 6143, 6144, 6145, 6146, 6148, 6149, 6151, 6152, 6153, 6159, 6166, 6169, 6172, 6176, 6177, 6178, 6183, 6190, 6229, 6230, 6231, 6232, 6236, 6237,
											6238, 6239, 6240, 6241, 6243, 6244, 6245, 6246, 6247, 6248, 6254, 6261, 6264, 6265, 6267, 6268, 6271, 6272, 6273, 6278, 6285, 6326, 6327, 6332, 6334, 6335, 6336, 6338, 6339, 6340, 6341, 6349, 6356, 6359, 6360, 6362, 6363, 6369, 6370, 6371, 6372, 6374, 6419, 6420, 6423, 6424, 6425, 6426, 6428, 6429,
											6430, 6431, 6432, 6433, 6434, 6436, 6437, 6438, 6444, 6449, 6451, 6452, 6454, 6457, 6461, 6462, 6463, 6464, 6465, 6466, 6467, 6468, 6469, 6475, 6516, 6517, 6518, 6519, 6520, 6522, 6524, 6525, 6526, 6527, 6528, 6529, 6530, 6531, 6539, 6544, 6546, 6547, 6549, 6550, 6552, 6553, 6559, 6560, 6561, 6562,
											6564, 6613, 6614, 6615, 6619, 6620, 6621, 6622, 6623, 6624, 6626, 6634, 6639, 6641, 6642, 6644, 6647, 6660, 6661, 6662, 6663, 6664, 6704, 6705, 6711, 6713, 6714, 6715, 6716, 6718, 6719, 6721, 6722, 6723, 6729, 6736, 6739, 6742, 6746, 6747, 6748, 6753, 6755, 6756, 6757, 6758, 6759, 6760, 6801, 6802,
											6807, 6809, 6810, 6811, 6813, 6814, 6815, 6816, 6824, 6831, 6834, 6835, 6837, 6838, 6844, 6845, 6846, 6847, 6849, 6850, 6851, 6852, 6853, 6854, 6898, 6899, 6900, 6904, 6905, 6906, 6907, 6908, 6909, 6911, 6919, 6924, 6926, 6927, 6929, 6932, 6945, 6946, 6947, 6948, 6949, 6999, 7000, 7001, 7003, 7004,
											7006, 7014, 7021, 7024, 7027, 7050, 7053, 7056, 7063, 7067, 7084, 7085, 7091, 7093, 7102, 7103, 7104, 7105, 7106, 7107, 7108, 7109, 7116, 7119, 7121, 7122, 7145, 7146, 7147, 7148, 7151, 7154, 7158, 7161, 7162, 7177, 7179, 7180, 7181, 7182, 7186, 7187, 7188, 7195, 7197, 7198, 7199, 7200, 7201, 7202,
											7203, 7204, 7211, 7214, 7215, 7216, 7217, 7218, 7241, 7242, 7249, 7256, 7272, 7276, 7277, 7282, 7290, 7294, 7295, 7296, 7297, 7298, 7299, 7306, 7309, 7310, 7311, 7312, 7313, 7335, 7338, 7339, 7340, 7341, 7342, 7343, 7348, 7350, 7352, 7369, 7370, 7373, 7374, 7375, 7376, 7378, 7382, 7387, 7388, 7389,
											7390, 7391, 7392, 7393, 7394, 7399, 7401, 7402, 7404, 7406, 7407, 7431, 7432, 7434, 7435, 7437, 7438, 7439, 7445, 7446, 7462, 7466, 7467, 7468, 7469, 7470, 7472, 7477, 7480, 7484, 7485, 7486, 7487, 7488, 7489, 7494, 7496, 7497, 7499, 7500, 7501, 7502, 7503, 7529, 7530, 7532, 7533, 7540, 7563, 7564,
											7565, 7572, 7579, 7580, 7581, 7582, 7583, 7584, 7589, 7591, 7592, 7594, 7596, 7597, 7654, 7655, 7661, 7663, 7673, 7680, 7681, 7682, 7683, 7685, 7688, 7749, 7750, 7751, 7752, 7756, 7757, 7758, 7768, 7775, 7776, 7777, 7778, 7780, 7783, 7785, 7788, 7846, 7847, 7852, 7870, 7871, 7872, 7873, 7875, 7878,
											7880, 7883, 7939, 7940, 7943, 7944, 7945, 7946, 7948, 7958, 7965, 7966, 7967, 7968, 7969, 7970, 7972, 7973, 8036, 8037, 8038, 8039, 8040, 8042, 8060, 8061, 8062, 8063, 8064, 8065, 8067, 8068, 8070, 8073, 8133, 8134, 8135, 8155, 8156, 8157, 8158, 8159, 8160, 8162, 8163, 8190, 8193, 8196, 8200, 8201,
											8202, 8203, 8204, 8207, 8220, 8224, 8225, 8231, 8233, 8234, 8235, 8236, 8238, 8239, 8241, 8242, 8243, 8244, 8245, 8246, 8247, 8248, 8249, 8256, 8259, 8261, 8262, 8285, 8288, 8291, 8298, 8302, 8305, 8306, 8307, 8308, 8310, 8319, 8320, 8326, 8328, 8337, 8338, 8339, 8340, 8341, 8342, 8343, 8344, 8351,
											8354, 8356, 8357, 8361, 8362, 8363, 8368, 8375, 8381, 8382, 8389, 8390, 8391, 8392, 8394, 8396, 8410, 8412, 8416, 8417, 8422, 8424, 8425, 8426, 8428, 8429, 8430, 8431, 8434, 8435, 8436, 8437, 8438, 8439, 8446, 8449, 8450, 8451, 8452, 8453, 8476, 8477, 8484, 8491, 8495, 8496, 8497, 8498, 8500, 8507,
											8511, 8512, 8517, 8525, 8529, 8530, 8531, 8532, 8533, 8534, 8541, 8544, 8545, 8546, 8547, 8548, 8554, 8555, 8556, 8557, 8559, 8574, 8575, 8577, 8578, 8580, 8581, 8582, 8584, 8585, 8600, 8608, 8609, 8610, 8614, 8615, 8616, 8617, 8618, 8619, 8621, 8624, 8625, 8626, 8627, 8628, 8629, 8634, 8636, 8637,
											8639, 8641, 8642, 8669, 8670, 8672, 8673, 8680, 8685, 8686, 8687, 8688, 8690, 8703, 8704, 8705, 8712, 8719, 8720, 8721, 8722, 8723, 8724, 8729, 8731, 8732, 8734, 8736, 8737, 8750, 8751, 8752, 8753, 8754, 8770, 8771, 8772, 8774, 8790, 8804, 8805, 8806, 8808, 8809, 8811, 8814, 8815, 8816, 8817, 8818,
											8819, 8826, 8829, 8831, 8832, 8865, 8866, 8867, 8869, 8875, 8876, 8877, 8878, 8880, 8885, 8899, 8900, 8901, 8903, 8904, 8906, 8909, 8910, 8911, 8912, 8913, 8914, 8921, 8924, 8926, 8927, 8970, 8971, 8972, 8973, 8974, 8975, 8978, 8979, 8981, 8983, 9108, 9192, 9199, 9200, 9201, 9202, 9205, 9208, 9209,
											9215, 9234, 9269, 9270, 9276, 9278, 9279, 9281, 9283, 9284, 9286, 9288, 9295, 9296, 9297, 9298, 9300, 9303, 9357, 9358, 9361, 9364, 9365, 9371, 9373, 9383, 9384, 9385, 9387, 9388, 9390, 9391, 9392, 9393, 9395, 9398, 9401, 9475, 9484, 9485, 9486, 9487, 9490, 9493, 9494, 9500, 9519, 9556, 9557, 9562,
											9564, 9566, 9568, 9569, 9571, 9580, 9581, 9582, 9583, 9585, 9588, 9590, 9593, 9641, 9643, 9646, 9651, 9652, 9657, 9669, 9670, 9672, 9673, 9675, 9676, 9677, 9678, 9680, 9683, 9685, 9686, 9688, 9757, 9769, 9770, 9771, 9772, 9775, 9778, 9779, 9785, 9802, 9804, 9843, 9844, 9845, 9849, 9851, 9853, 9854,
											9856, 9865, 9866, 9867, 9868, 9869, 9870, 9872, 9873, 9919, 9928, 9931, 9938, 9939, 9940, 9954, 9955, 9957, 9958, 9960, 9961, 9962, 9963, 9964, 9965, 9967, 9968, 9971, 10040, 10054, 10055, 10056, 10057, 10060, 10063, 10064, 10070, 10086, 10089, 10134, 10136, 10138, 10139, 10141, 10150, 10151, 10152, 10153, 10155, 10158,
											10165, 10184, 10203, 10213, 10216, 10229, 10231, 10233, 10234, 10236, 10239, 10240, 10242, 10243, 10245, 10246, 10247, 10248, 10250, 10253, 10256, 10336, 10339, 10340, 10341, 10342, 10345, 10348, 10349, 10399, 10403, 10406, 10429, 10430, 10432, 10433, 10435, 10436, 10437, 10438, 10440, 10443, 10446, 10490, 10491, 10492, 10493, 10495, 10524, 10525,
											10526, 10527, 10528, 10529, 10536, 10539, 10541, 10542};

				Eigen::MatrixXd C = MatrixXd::Zero(95, 111);
				for (int i = 0; i < 2058; i++)
				{
					C(C_ind[i]) = coeffs(coeffs_ind[i]);
				}

				Eigen::MatrixXd C0 = C.leftCols(95);
				Eigen::MatrixXd C1 = C.rightCols(16);
				Eigen::MatrixXd C12 = C0.fullPivLu().solve(C1);
				Eigen::MatrixXd RR(25, 16);
				RR << -C12.bottomRows(9), MatrixXd::Identity(16, 16);

				static const int AM_ind[] = {22, 12, 0, 1, 15, 2, 3, 18, 4, 5, 21, 6, 7, 23, 24, 8};
				Eigen::MatrixXd AM(16, 16);
				for (int i = 0; i < 16; i++)
				{
					AM.row(i) = RR.row(AM_ind[i]);
				}

				EigenSolver<Eigen::MatrixXd> es(AM);
				ArrayXcd D = es.eigenvalues();
				ArrayXXcd V = es.eigenvectors();
				V = (V / V.row(0).replicate(16, 1)).eval();

				MatrixXcd sols(5, 16);
				sols.row(0) = V.row(1);
				sols.row(1) = V.row(4);
				sols.row(2) = V.row(7);
				sols.row(3) = V.row(10);
				sols.row(4) = D.transpose();
				return sols;
			}

			OLGA_INLINE bool StitchingGeneralFocalEqualLS::estimateModel(
				const cv::Mat &data_,
				const size_t *sample_,
				size_t sample_number_,
				std::vector<Model> &models_,
				const double *weights_) const
			{
				using namespace Eigen;

				Eigen::MatrixXd X(sample_number_, 2),
					U(sample_number_, 2);
				MatrixXd A = MatrixXd::Zero(2 * sample_number_, 9);

				for (size_t sampleIdx = 0; sampleIdx < sample_number_; ++sampleIdx)
				{
					const size_t &pointIdx = sample_[sampleIdx];

					X(sampleIdx, 0) = data_.at<double>(pointIdx, 0);
					X(sampleIdx, 1) = data_.at<double>(pointIdx, 1);

					U(sampleIdx, 0) = data_.at<double>(pointIdx, 2);
					U(sampleIdx, 1) = data_.at<double>(pointIdx, 3);

					A.row(sampleIdx * 2) << 0, 0, 0, X(sampleIdx, 0), X(sampleIdx, 1), -1, U(sampleIdx, 1) * X(sampleIdx, 0), U(sampleIdx, 1) * X(sampleIdx, 1), U(sampleIdx, 1);
					A.row(sampleIdx * 2 + 1) << X(sampleIdx, 0), X(sampleIdx, 1), 1, 0, 0, 0, -U(sampleIdx, 0) * X(sampleIdx, 0), -U(sampleIdx, 0) * X(sampleIdx, 1), -U(sampleIdx, 0);
				}
				Eigen::JacobiSVD<Eigen::MatrixXd> svd(A, Eigen::ComputeFullV);

				Eigen::VectorXd data(45, 1);
				data << svd.matrixV().col(4),
					svd.matrixV().col(5),
					svd.matrixV().col(6),
					svd.matrixV().col(7),
					svd.matrixV().col(8);

				const Eigen::MatrixXcd sols1 = solver_equal_focal_ls(data);

				for (size_t k = 0; k < 16; ++k)
				{
					if (sols1(0, k).imag() > std::numeric_limits<double>::epsilon())
						continue;
					if (sols1(1, k).imag() > std::numeric_limits<double>::epsilon())
						continue;

					const Eigen::Matrix<double, 9, 1> &null_space = sols1(0, k).real() * svd.matrixV().col(4) + sols1(1, k).real() * svd.matrixV().col(5) + sols1(2, k).real() * svd.matrixV().col(6) + sols1(3, k).real() * svd.matrixV().col(7) + sols1(4, k).real() * svd.matrixV().col(8);

					if (null_space.hasNaN())
						continue;
					Eigen::Matrix3d H;
					H << null_space(0), null_space(1), null_space(2),
						null_space(3), null_space(4), null_space(5),
						null_space(6), null_space(7), null_space(8);

					double fsq = H(1, 2) / (H(0, 1) * H(2, 0) - H(0, 0) * H(2, 1));
					std::cout<< fsq <<std::endl;

					if (fsq < 0)
						continue;

					RadialHomography model;
					model.descriptor.block<3, 3>(0, 0) = H;
					model.descriptor(0, 3) = 0;
					model.descriptor(1, 3) = 0;
					models_.push_back(model);
				}

				if (!(models_.size() > 0))
				{
					RadialHomography model;
					model.descriptor.block<3, 3>(0, 0) = Eigen::Matrix3d::Identity();
					model.descriptor(0, 3) = 0;
					model.descriptor(1, 3) = 0;
					models_.push_back(model);
				}

				return models_.size() > 0;
			} // namespace solver

		} // namespace solver
	}	  // namespace estimator
} // namespace gcransac
